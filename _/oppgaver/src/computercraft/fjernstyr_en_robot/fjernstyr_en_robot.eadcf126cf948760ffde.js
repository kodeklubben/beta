webpackJsonp([33,426],{1343:function(s,e,n){s.exports={frontmatter:n(354),content:n(2511)}},2511:function(s,e,n){s.exports="<section class=intro id=introduksjon> <h1 class=intro id=introduksjon>Introduksjon</h1> <p>I denne oppgaven skal vi fjernstyre en robot fra en annen datamaskin. Til dette får vi bruk for både å hente tastetrykk fra brukeren, sende disse til en annen datamaskin, og tolke disse som en kommando. For avanserte ComputerCraft-ere!</p> <figure><img src="+n(3229)+' alt=""></figure> </section> <section class=activity id=steg-1-forberedelser> <h1 class=activity id=steg-1-forberedelser>Steg 1: Forberedelser</h1> <p>Denne oppgaven bygger videre på andre oppgaver:</p> <ul> <li><a href=../nettverk_send_beskjed/nettverk_send_beskjed.html>Send en beskjed over nettverk</a> beskriver hvordan vi sender og mottar meldinger over <code>rednet</code>.</li> <li><a href=../hendelser/hendelser.html#steg-1-skattejakt>Hendelser -- Steg 1: Skattejakt</a> viser hvordan vi kan gjenkjenne hvilken tast brukeren har trykket på.</li> <li><a href=../bygg_et_hus/bygg_et_hus.html#steg-4-funksjoner>Bygg et Hus -- Steg 4: Funksjoner</a> forklarer hvordan vi kan skrive egne funksjoner.</li> </ul> <p>Gå tilbake og kikk på disse to oppgavene hvis denne blir vanskelig.</p> <section class=tip id=redigere-filer-utenfor-computercraft> <h2 class=tip id=redigere-filer-utenfor-computercraft>Redigere filer utenfor ComputerCraft</h2> <p><code>edit</code>-programmet i ComputerCraft fungerer fint med små programmer, men blir tungvindt for store programmer. Det er for eksempel ikke lett å klippe og lime kode. Nå skal vi lære hvordan vi redigerer ComputerCraft-filer <em>utenfor</em> ComputerCraft.</p> <p>Filene vi lager i ComputerCraft har forskjellig plassering på forskjellige operativsystemer:</p> <ul> <li>Windows: <code>%AppData%\\Roaming\\.minecraft\\saves\\navn-på-din-save\\computer\\id</code></li> <li>Linux: <code>~/.minecraft/saves/navn-på-din-save/computer/id</code></li> <li>Mac: <code>~/Library/Application Support/.minecraft/saves/navn-på-din-save/computer/id</code></li> </ul> <p>Vil du redigere filen <code>hello</code> fra spillet &quot;Kodeklubben 2016&quot; på datamskin #3 på Windows finner du den altså på <code>AppData\\Roaming\\.minecraft\\saves\\Kodeklubben 2016\\computer\\3\\hello</code>.</p> </section> <section id=finn-filene-pa-mac> <h2 id=finn-filene-pa-mac>Finn filene på Mac</h2> <p>For å åpne filene på Mac kan du bruke Finder:</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_0><label for=cbx_0> Åpne Finder fra menyen</label></li> </ul> <figure><img src='+n(3228)+' alt="Finn Finder i menyen"></figure> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_1><label for=cbx_1> Trykk på <code>Gå</code> og så <code>Gå til mappe</code></label></li> </ul> <figure><img src='+n(3230)+' alt="Gå til mappe"></figure> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_2><label for=cbx_2> Skriv inn filplasseringen (<code>~/Library/Application Support/.minecraft/saves/navn-på-din-save/computer/id</code>)</label></li> </ul> <figure><img src='+n(3231)+' alt="Skriv inn filplasseringen"></figure> <p>Her finnes programmene du har skrevet som egne filer. Åpne så programmet ditt i en egen teksteditor:</p> <ul> <li> <p><a href=https://notepad-plus-plus.org/ >Notepad++</a> er god og enkel. Støtter Windows.</p> </li> <li> <p><a href=https://atom.io/ >Github Atom</a> er noe mer avansert. Støtter Windows, Mac og Linux.</p> <p>Atom har en egen pakke for Lua-programmering. For å installere denne, gå til <code>Edit -&gt; Preferences -&gt; Install</code>, søk etter <code>lua</code> og installer pakken <code>language-lua</code>.</p> </li> </ul> <p>Gratulerer! Du kan nå klippe og lime kode mellom datamskiner. Eller vil du flytte et prgram til en ny save?</p> </section> <section class=tip id=skriv-koden-selv> <h2 class=tip id=skriv-koden-selv>Skriv koden selv!</h2> <p>Skriv koden du leser nå selv!</p> <p>Du blir ikke vant med et programmeringsspråk uten å skrive kode selv. Når jeg leser en guide på internett, bruker jeg ikke klipp-og-lim. I stedet leser jeg et stykke kode, og skriver selv. Da leser jeg den grundigere, og får med meg hvor det skal være kommaer, <code>end</code>, <code>then</code> og andre småting som Lua kan klage på.</p> <p>Og etter du har skrevet koden -- prøv litt fram og tilbake!</p> <ul> <li>Trenger jeg egentlig denne biten?</li> <li>Hva skjer om jeg fjerner denne setningen?</li> <li>Eller om jeg putter inn et annet tall her?</li> </ul> <p>Programmering er lek! Ikke la noen fortelle deg noe annet!</p> </section> </section> <section class=activity id=steg-2-tastetrykk-pa-fjernkontroll> <h1 class=activity id=steg-2-tastetrykk-pa-fjernkontroll>Steg 2: Tastetrykk på fjernkontroll</h1> <p>Først programmerer vi kommandosentralen vår! Den må lytte etter tastetrykk, oversette disse til kommandoer og sende til roboten.</p> <section class=check id=sjekkliste> <h2 class=check id=sjekkliste>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_3><label for=cbx_3> Vi bygger først kontroller. Craft en <strong>Advanced Wireless Pocket Computer</strong>. Denne kan vi bruke mens vi går rundt, og er ikke bundet til én plass.</label></li> </ul> </section> <section class=tip id=filtyper> <h2 class=tip id=filtyper>Filtyper</h2> <p>Filer har ofte etternavn som sier filtypen.</p> <ul> <li> <p>Lua programmer heter ofte <code>program.lua</code></p> </li> <li> <p>Nettsider heter ofte <code>nettside.html</code>: Nettsider skrives i et språk som heter HTML</p> </li> <li> <p><code>dokument.docx</code> er et Word-dokument</p> </li> <li> <p>Kjenner du til andre filtyper?</p> </li> </ul> </section> <section class=check id=sjekkliste-2> <h2 class=check id=sjekkliste-2>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_4><label for=cbx_4> Vi kaller kontroller-programmet vårt <code>remote.lua</code></label></p> <pre><code>edit remote<span class=hljs-selector-class>.lua</span>\n</code></pre> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_5><label for=cbx_5> La oss starte med å lese inn hva brukeren trykker på:</label></p> <pre><code class=lua><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>remoteMove</span><span class=hljs-params>()</span></span>\n  <span class=hljs-keyword>local</span> action, keycode = <span class=hljs-built_in>os</span>.pullEvent(<span class=hljs-string>\'key\'</span>)\n  <span class=hljs-keyword>if</span> keycode == keys.w <span class=hljs-keyword>then</span>\n    <span class=hljs-keyword>return</span> {<span class=hljs-string>"Go"</span>, <span class=hljs-string>"forward!"</span>}\n  <span class=hljs-keyword>elseif</span> keycode == keys.a <span class=hljs-keyword>then</span>\n    <span class=hljs-keyword>return</span> {<span class=hljs-string>"Denne"</span>, <span class=hljs-string>"må"</span>, <span class=hljs-string>"du"</span>, <span class=hljs-string>"fikse"</span>, <span class=hljs-string>"selv!"</span>}\n  <span class=hljs-keyword>else</span>\n    <span class=hljs-keyword>return</span> {<span class=hljs-string>"Hjelp! Ukjent tast! Hva skal jeg gjøre???"</span>}\n  <span class=hljs-keyword>end</span>\n<span class=hljs-keyword>end</span>\n\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>main</span><span class=hljs-params>(  )</span></span>\n  <span class=hljs-built_in>print</span>(<span class=hljs-string>"Venter på kommando ..."</span>)\n  rednet.<span class=hljs-built_in>open</span>(<span class=hljs-string>"back"</span>)  <span class=hljs-comment>-- Hvor har du modemet ditt?</span>\n  <span class=hljs-keyword>while</span> <span class=hljs-literal>true</span> <span class=hljs-keyword>do</span>\n    <span class=hljs-keyword>local</span> command = remoteMove()\n    <span class=hljs-built_in>print</span>(<span class=hljs-built_in>unpack</span>(command))\n  <span class=hljs-keyword>end</span>\n<span class=hljs-keyword>end</span>\n\nmain()\n</code></pre> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_6><label for=cbx_6> Prøv! Hva skjer når du trykker på <code>w</code>? Hva skjer når du trykker på noe annet?</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_7><label for=cbx_7> Roboten vår skal gjerne kunne svinge og gå bakover i tillegg. Legg til if-setninger dersom brukeren trykker på <code>a</code>, <code>s</code> eller <code>d</code>!</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_8><label for=cbx_8> Roboten kan i tillegg fly opp og ned. I Minecraft brukes <code>space</code> for å fly opp, og <code>shift</code> for å fly ned. Sjekk <a href=http://www.computercraft.info/wiki/Keys_%28API%29>ComputerCraft Wiki</a> for hvordan du bruker disse!</label></p> </li> </ul> <p>Nå kjenner vi igjen tastene for å bevege seg rundt. Neste steg er å sende disse til roboten som skal bevege på seg.</p> </section> </section> <section class=activity id=steg-3-kommandotabell> <h1 class=activity id=steg-3-kommandotabell>Steg 3: Kommandotabell</h1> <p>Vi skal bruke en tabell til å lagre kommandoen vår. Lua kaller en tabell for <code>table</code>, tabell på engelsk.</p> <p>La oss først leke oss litt med en robot.</p> <section class=check id=sjekkliste-3> <h2 class=check id=sjekkliste-3>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_9><label for=cbx_9> Pass på at roboten har nok kull!</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_10><label for=cbx_10> Åpne lua-tolkeren, og lag en tabell:</label></p> <pre><code><span class=hljs-meta>&gt;</span><span class=bash> lua</span>\n<span class=hljs-meta>lua&gt;</span><span class=bash> tabell = {<span class=hljs-string>"hei"</span>, <span class=hljs-string>"på"</span>, <span class=hljs-string>"deg"</span>}</span>\n<span class=hljs-meta>lua&gt;</span><span class=bash> <span class=hljs-built_in>print</span>(tabell)</span>\n<span class=hljs-meta>lua&gt;</span><span class=bash> <span class=hljs-built_in>print</span>(unpack(tabell))</span>\n<span class=hljs-meta>lua&gt;</span><span class=bash> <span class=hljs-built_in>print</span>(tabell[1])</span>\n<span class=hljs-meta>lua&gt;</span><span class=bash> <span class=hljs-built_in>print</span>(tabell[2])</span>\n<span class=hljs-meta>lua&gt;</span><span class=bash> <span class=hljs-built_in>print</span>(tabell[3])</span>\n</code></pre> </li> </ul> </section> <section class=tip id=tabeller> <h2 class=tip id=tabeller>Tabeller</h2> <ul> <li> <p>Prøver vi skrive ut en tabell alene, får vi <em>adressen</em> til tabellen</p> </li> <li> <p>Unpack lar oss bruke tabellen i en funksjon:</p> <p><code>print(unpack({1, 2}))</code> er det samme som <code>print(1, 2)</code>.</p> </li> <li> <p>Vil vi ha ut et <em>element</em> fra tabellen, setter vi inn <em>indeksen</em> til elementet med firkantklammer: <code>tabell[2]</code>.</p> </li> </ul> </section> <section class=check id=sjekkliste-4> <h2 class=check id=sjekkliste-4>Sjekkliste</h2> <p>Nå skal vi se på to måter å styre en robot på.</p> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_11><label for=cbx_11> Start <code>CraftOS</code> på en robot, og kjør først kommandoen på &quot;vanlig&quot; vis:</label></p> <pre><code><span class=hljs-meta>&gt;</span><span class=bash> go forward 5</span>\n<span class=hljs-meta>&gt;</span><span class=bash> turn left</span>\n</code></pre> </li> </ul> <p>... men vi vil da ikke løpe etter roboten og skrive inn nye kommandoer dagen lang! La oss programmere dette.</p> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_12><label for=cbx_12> Åpne lua-tolkeren og lag tabeller for kommandoene over:</label></p> <pre><code class=lua>&gt; lua\nlua&gt; command1 = {<span class=hljs-string>"go"</span>, <span class=hljs-string>"forward"</span>, <span class=hljs-string>"5"</span>}\nlua&gt; command2 = {<span class=hljs-string>"turn"</span>, <span class=hljs-string>"left"</span>}\nlua&gt; shell.run(<span class=hljs-built_in>unpack</span>(command1))  <span class=hljs-comment>-- Hva gjør unpack? Kan du gjøre dette på noen annen måte?</span>\nlua&gt; shell.run(<span class=hljs-built_in>unpack</span>(command2))\n</code></pre> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_13><label for=cbx_13> Hva gjør unpack? Hvordan kan vi bruke <code>shell.run()</code> til å gå frem <em>uten</em> <code>unpack()</code>?</label></p> </li> </ul> </section> <section class=try id=nott> <h2 class=try id=nott>Nøtt</h2> <ul> <li> <p>Åpne et nytt program: <code>edit many.lua</code> (Du kan bruke en annen editor hvis du vil)</p> <pre><code class=lua>cmd = {<span class=hljs-string>"go"</span>, <span class=hljs-string>"forward"</span>, <span class=hljs-string>"5"</span>}\n</code></pre> </li> <li> <p>Kan du lage en funksjon som kjører kommandoen <code>cmd</code> 2 ganger?</p> </li> <li> <p>Ekstra vanskelig: kan du lage en funksjon som kjører kommandoen i en tabell <code>n</code> ganger, der n sendes inn i funksjonen?</p> <p>Du kan starte med dette:</p> <pre><code class=lua><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>manyTimes</span><span class=hljs-params>( command, times )</span></span>\n  <span class=hljs-keyword>for</span> i=<span class=hljs-number>1</span>,times <span class=hljs-keyword>do</span>\n    <span class=hljs-comment>-- Hva skal du gjøre mange ganger?</span>\n  <span class=hljs-keyword>end</span>\n<span class=hljs-keyword>end</span>\n\ncommand1 = {<span class=hljs-string>"go forward 5"</span>}\n\nmanyTimes(command1, <span class=hljs-number>7</span>)\n</code></pre> </li> </ul> </section> <section class=check id=sjekkliste-5> <h2 class=check id=sjekkliste-5>Sjekkliste</h2> <p>Nå skal vi endre på koden på fjernkontrollen vår så den faktisk sender kommandoer til roboten. Hva er forskjellig fra koden over? Forklar til en annen programmerer eller voksen! Hva gjør programmet nå forskjellig?</p> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_14><label for=cbx_14> Åpne igjen filen <code>remote.lua</code> på kontrolleren</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_15><label for=cbx_15> Endre koden til:</label></p> <pre><code class=lua>workerId = <span class=hljs-number>5</span>  <span class=hljs-comment>-- Hvilket nummer er din robot? Hvordan finner du nummeret?</span>\n\n<span class=hljs-comment>-- OBS: Ny fuksjon som inneholder deler av gamle remoteMove!</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>toMoveCommand</span><span class=hljs-params>(keycode)</span></span>\n  <span class=hljs-keyword>if</span> keycode == keys.w <span class=hljs-keyword>then</span>\n    <span class=hljs-keyword>return</span> {<span class=hljs-string>"go"</span>, <span class=hljs-string>"forward"</span>}  <span class=hljs-comment>-- OBS! Nå må disse matche kommandoer!</span>\n  <span class=hljs-keyword>elseif</span> keycode == keys.a <span class=hljs-keyword>then</span>\n    <span class=hljs-keyword>return</span> {<span class=hljs-string>"Denne"</span>, <span class=hljs-string>"må"</span>, <span class=hljs-string>"du"</span>, <span class=hljs-string>"fikse"</span>, <span class=hljs-string>"selv!"</span>}\n  <span class=hljs-keyword>else</span>\n    <span class=hljs-keyword>return</span> <span class=hljs-literal>nil</span>\n  <span class=hljs-keyword>end</span>\n<span class=hljs-keyword>end</span>\n\n<span class=hljs-comment>-- ... og nye remoteMove sender nå kommandoen dit den skal!</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>remoteMove</span><span class=hljs-params>()</span></span>\n  <span class=hljs-keyword>local</span> action, keycode = <span class=hljs-built_in>os</span>.pullEvent(<span class=hljs-string>\'key\'</span>)\n  command = toMoveCommand(keycode)\n  <span class=hljs-keyword>if</span> command == <span class=hljs-literal>nil</span> <span class=hljs-keyword>then</span>\n    <span class=hljs-built_in>print</span>(<span class=hljs-string>"Unknown key: "</span> .. keycode)\n  <span class=hljs-keyword>else</span>\n    <span class=hljs-built_in>print</span>(<span class=hljs-string>"Sending "</span>.. <span class=hljs-built_in>unpack</span>(command))\n    rednet.send(workerId, command)\n  <span class=hljs-keyword>end</span>\n<span class=hljs-keyword>end</span>\n\n<span class=hljs-comment>-- Denne er endret litt</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>main</span><span class=hljs-params>(  )</span></span>\n  <span class=hljs-built_in>print</span>(<span class=hljs-string>"Listening for move commands ..."</span>)\n  rednet.<span class=hljs-built_in>open</span>(<span class=hljs-string>"back"</span>)\n  <span class=hljs-keyword>while</span> <span class=hljs-literal>true</span> <span class=hljs-keyword>do</span>\n  <span class=hljs-comment>-- Her skal vi ikke lenger skrive ut, men flytte på roboten</span>\n    remoteMove()\n  <span class=hljs-keyword>end</span>\n<span class=hljs-keyword>end</span>\n\nmain()\n</code></pre> </li> </ul> </section> </section> <section class=activity id=steg-4-motta-kommando-pa-robot> <h1 class=activity id=steg-4-motta-kommando-pa-robot>Steg 4: Motta kommando på robot</h1> <p>Gratulerer! Du har nå bygd en fjernkontroll!</p> <p>Hva skal vi bruke denne til, mon tro?</p> <p>Noe å styre?</p> <p>Jepp, jeg er helt enig. La oss gjøre det!</p> <section class=check id=sjekkliste-6> <h2 class=check id=sjekkliste-6>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_16><label for=cbx_16> Åpne <code>react.lua</code> på roboten</label></li> </ul> </section> <section class=tip id=egne-filer> <h2 class=tip id=egne-filer>Egne filer</h2> <ul> <li> <p>Husker du hvordan vi finner filene på vår egen datamaskin, så vi kan bruke Notepad++ eller Atom? Se over!</p> </li> <li> <p>Hvis datamaskinen ikke har noen filer ennå, har den heller ikke noen mappe. Lag en tom fil i CraftOS for å få mappen til å dukke opp!</p> </li> </ul> </section> <section class=check id=sjekkliste-7> <h2 class=check id=sjekkliste-7>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_17><label for=cbx_17> Fyll så på med koden!</label></p> <pre><code class=lua><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>main</span><span class=hljs-params>()</span></span>\n  <span class=hljs-comment>-- Hva sier pheripherals? Hvilken side er modemet på?</span>\n  rednet.<span class=hljs-built_in>open</span>(<span class=hljs-string>"left"</span>)\n  <span class=hljs-keyword>while</span> <span class=hljs-literal>true</span> <span class=hljs-keyword>do</span>\n    sender, message = rednet.receive(<span class=hljs-number>99999</span>)\n    <span class=hljs-built_in>print</span>(<span class=hljs-string>"Message from "</span> .. sender .. <span class=hljs-string>" received: "</span>)\n    <span class=hljs-built_in>print</span>(message)\n    shell.run(<span class=hljs-built_in>unpack</span>(message))\n  <span class=hljs-keyword>end</span>\n<span class=hljs-keyword>end</span>\n\nmain()\n</code></pre> </li> </ul> </section> <section class=tip id=""> <h2 class=tip id=""><code>main()</code></h2> <p>Metoden <code>main()</code> er ofte inngangsporten til et program. I for eksempel Lua og Python kan vi velge selv om vi vil ha en main-metode eller ikke. I andre språk må main være med. Eksempler på programmeringsspråk vi <em>må</em> ha main i er C, Java og Haskell.</p> </section> <section class=check id=sjekkliste-8> <h2 class=check id=sjekkliste-8>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_18><label for=cbx_18> Hva brukes 99999 til?</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_19><label for=cbx_19> Hvorfor bruker vi en <code>while</code>-løkke? Hva skjer om vi ikke har en while-løkke?</label></p> </li> </ul> </section> </section> <section class=activity id=steg-5-kjor-robot> <h1 class=activity id=steg-5-kjor-robot>Steg 5: Kjør robot!</h1> <p>Gratulerer! Du har gjennomført en utfordrende programmeringsoppgave, og sendt meningsfulle beskjeder over <code>rednet</code>! Vær stolt!</p> <p>Nå skal vi prøve det selv!</p> <section class=check id=sjekkliste-9> <h2 class=check id=sjekkliste-9>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_20><label for=cbx_20> Start <code>react.lua</code> på din robot</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_21><label for=cbx_21> Start <code>remote.lua</code> på din Portable Computer</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_22><label for=cbx_22> Trykk <code>w</code> for å gå fremover!</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_23><label for=cbx_23> Legg til andre kommandoer du savner!</label></p> <p>Forslag:</p> <ul> <li>Angrip</li> <li>Bygg blokk foran</li> <li>Kjør <code>excavate 4</code> her du er</li> </ul> </li> </ul> </section> </section> <section class=activity id=steg-6-du-vil-ha-mer> <h1 class=activity id=steg-6-du-vil-ha-mer>Steg 6: Du vil ha mer?</h1> <p>Du har spilt ComputerCraft <em>lenge</em> og begynner å få et utall forskjellige roboter du må styre. Da er det kjekt å kunne kjøre andre kommandoer på roboten!</p> <p>Programmet vi har skrevet for å motta og kjøre kommandoer, <code>react.lua</code> kan kjøre andre kommandoer enn de vi har definert for å bevege seg rundt, for eksempel <code>excavate</code> og <code>dance</code>.</p> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_24><label for=cbx_24> Åpne kontrolleren</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_25><label for=cbx_25> Endre følgende i <code>ssh.lua</code>:</label></p> <pre><code class=lua><span class=hljs-comment>-- Starter jeg programmet sånn:</span>\n<span class=hljs-comment>-- &gt; ssh.lua 5</span>\narguments = ...\n<span class=hljs-comment>-- ... blir arguments = "5"</span>\nremoteId = <span class=hljs-built_in>tonumber</span>(arguments)\n<span class=hljs-comment>-- ... og remoteId = 5!</span>\n\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>pack</span><span class=hljs-params>(...)</span></span>\n  <span class=hljs-keyword>return</span> <span class=hljs-built_in>arg</span>\n<span class=hljs-keyword>end</span>\n\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>remoteCommand</span><span class=hljs-params>()</span></span>\n  <span class=hljs-built_in>io</span>.<span class=hljs-built_in>write</span>(<span class=hljs-string>"ssh@"</span> .. remoteId .. <span class=hljs-string>"&gt; "</span>)\n  <span class=hljs-keyword>local</span> intputString = <span class=hljs-built_in>io</span>.<span class=hljs-built_in>read</span>()\n  <span class=hljs-keyword>local</span> commandTable = pack(intputString)\n  <span class=hljs-built_in>print</span>(<span class=hljs-string>"Sending: "</span>)\n  <span class=hljs-built_in>print</span>(<span class=hljs-built_in>unpack</span>(commandTable))\n  rednet.send(remoteId, commandTable)\n<span class=hljs-keyword>end</span>\n\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>main</span><span class=hljs-params>(  )</span></span>\n  <span class=hljs-built_in>print</span>(<span class=hljs-string>"Listening for move commands ..."</span>)\n  rednet.<span class=hljs-built_in>open</span>(<span class=hljs-string>"back"</span>)\n  <span class=hljs-keyword>while</span> <span class=hljs-literal>true</span> <span class=hljs-keyword>do</span>\n    remoteCommand()\n  <span class=hljs-keyword>end</span>\n<span class=hljs-keyword>end</span>\n\nmain()\n</code></pre> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_26><label for=cbx_26> Start <code>react.lua</code> på roboten</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_27><label for=cbx_27> Start <code>ssh.lua</code> på kontrolleren</label></p> </li> </ul> <p>Fjernstyrt graverobot er nyttig! En graverobot kan craftes fra en annen turtle med pickaxe på ledig side. Dette er hva min gjorde:</p> <p><img src='+n(3232)+' alt=""> Graveroboten er klar til høyre i bildet.</p> <p><img src='+n(3233)+' alt=""> Flytter den til der den skal begynne å grave ...</p> <p><img src='+n(3234)+' alt=""> ... Og der har den kommet et stykke på vei!</p> </section> '},3228:function(s,e,n){s.exports=n.p+"_/oppgaver/src/computercraft/fjernstyr_en_robot/finder.289e20.png"},3229:function(s,e,n){s.exports=n.p+"_/oppgaver/src/computercraft/fjernstyr_en_robot/fjernstyring.ca6c7e.png"},3230:function(s,e,n){s.exports=n.p+"_/oppgaver/src/computercraft/fjernstyr_en_robot/gaatilmappe.8e939c.png"},3231:function(s,e,n){s.exports=n.p+"_/oppgaver/src/computercraft/fjernstyr_en_robot/gaatilmappedialog.356fcc.png"},3232:function(s,e,n){s.exports=n.p+"_/oppgaver/src/computercraft/fjernstyr_en_robot/ssh_1.1db4e6.png"},3233:function(s,e,n){s.exports=n.p+"_/oppgaver/src/computercraft/fjernstyr_en_robot/ssh_2.294ddb.png"},3234:function(s,e,n){s.exports=n.p+"_/oppgaver/src/computercraft/fjernstyr_en_robot/ssh_3.f40c03.png"}});