webpackJsonp([112,429],{262:function(e,t,r){e.exports=r.p+"_/oppgaver/src/scratch/straffespark/straffespark.954087.png"},1661:function(e,t,r){e.exports={frontmatter:r(662),content:r(2852)}},2852:function(e,t,r){e.exports="<section class=activity id=om-oppgaven> <h1 class=activity id=om-oppgaven>Om oppgaven</h1> <p>I denne oppgaven skal elevene lage et enkelt fotballspill, hvor de skal prøve å score på så mange straffespark som mulig. Denne oppgaven egner seg godt som en første introduksjon til Scratch.</p> <section class=check id=oppgaven-passer-til> <h2 class=check id=oppgaven-passer-til>Oppgaven passer til:</h2> <p><strong>Fag</strong>: Matematikk, Programmering</p> <p><strong>Trinn</strong>: 7.-10. trinn</p> <p><strong>Tema</strong>: Koordinater, objektorientert programmering, løkker, variabler, tester</p> <p><strong>Tidsbruk</strong>: Dobbelttime</p> <figure><img src="+r(262)+' alt=""></figure> </section> <section class=challenge id=kompetansemal> <h2 class=challenge id=kompetansemal>Kompetansemål</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_0><label for=cbx_0> <strong>Matematikk, 4. årstrinn</strong>: lese av, plassere og beskrive posisjoner i rutenett, på kart og i koordinatsystemer, både med og uten digitale verktøy</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_1><label for=cbx_1> <strong>Programmering, valgfag</strong>: bruke grunnleggende prinsipper i programmering, slik som løkker, tester, variabler, funksjoner og enkel brukerinteraksjon</label></p> </li> </ul> </section> <section class=challenge id=forslag-til-laeringsmal> <h2 class=challenge id=forslag-til-laeringsmal>Forslag til læringsmål</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_2><label for=cbx_2> Elevene kan bruke matematiske begreper til å forklare figurene og ballens posisjon i koordinatsystemet (bakgrunnen).</label></li> <li class=task-list-item><input type=checkbox id=cbx_3><label for=cbx_3> Elevene kan forklare hvordan løkker, tester og variabler fungerer, og hvorfor de er hensiktsmessige å bruke i denne oppgaven.</label></li> </ul> </section> <section class=challenge id=forslag-til-vurderingskriterier> <h2 class=challenge id=forslag-til-vurderingskriterier>Forslag til vurderingskriterier</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_4><label for=cbx_4> Eleven oppnår middels måloppnåelse ved å fullføre oppgaven.</label></li> <li class=task-list-item><input type=checkbox id=cbx_5><label for=cbx_5> Eleven viser høy måloppnåelse ved å videreutvikle egen kode basert på oppgaven, for eksempel ved å gjøre en eller flere av variasjonene nedenfor.</label></li> <li class=task-list-item><input type=checkbox id=cbx_6><label for=cbx_6> Dette er en oppgave hvor elevene fint kan prøve hverandres spill og vurdere hverandre.</label></li> </ul> </section> <section class=challenge id=forutsetninger-og-utstyr> <h2 class=challenge id=forutsetninger-og-utstyr>Forutsetninger og utstyr</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_7><label for=cbx_7> <strong>Forutsetninger</strong>: Ingen</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_8><label for=cbx_8> <strong>Utstyr</strong>: Datamaskiner med Scratch installert. Eventuelt kan elevene bruke Scratch i nettleseren dersom de har en bruker (eller registrerer seg) på <a href=http://scratch.mit.edu/ target=_blank>scratch.mit.edu/</a>.</label></p> </li> </ul> </section> <section id=fremgangsmate> <h2 id=fremgangsmate>Fremgangsmåte</h2> <p>Her kommer tips, erfaring og utfordringer til de ulike stegene i den faktiske oppgaven. <a href=../straffespark/straffespark.html target=_blank>Klikk her for å se oppgaveteksten.</a></p> </section> </section> <section class=activity id=generelt> <h1 class=activity id=generelt>Generelt</h1> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_9><label for=cbx_9> I denne oppgaven må elevene holde styr på tre figurer i tillegg til scenen, og passe på at hvert skript kodes på riktig sted. Vær nøye med at skriptene ligger på riktig figur som beskrevet i oppgaven.</label></li> </ul> </section> <section class=activity id=steg-2-vi-sparker-ballenn> <h1 class=activity id=steg-2-vi-sparker-ballenn>Steg 2: Vi sparker ballenn</h1> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_10><label for=cbx_10> Katten skyter ballen før man klikker på den, eller den må gå flere steg før den når frem til ballen. Om dette skjer bør man flytte på hvor <code>Leo</code> og <code>Ball</code> plasseres ved å endre på <code class=b>gå til x: () y: ()</code>-klossene. Om problemet er at katten må gå flere steg kan man også endre på hvor langt <code>Leo</code> <code class=blockmotion>går</code> når han klikkes. Dersom elevene allerede kan litt om koordinatsystemet er det en fin øvelse å tenke på hvilke koordinater man bør endre for å flytte figurene. Alternativt kan man flytte på figurene ved å klikke og dra, og deretter se på koordinatene øverst til høyre i skriptvinduet.</label></li> </ul> </section> <section class=activity id=steg-4-keeperen-redder> <h1 class=activity id=steg-4-keeperen-redder>Steg 4: Keeperen redder!</h1> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_11><label for=cbx_11> I dette steget jobber vi videre med skriptet som ble skrevet på <code>Ball</code> i steg 2. Pass på at elevene ikke lager to forskjellige skript. Om de lager to forskjellige skript vil effekten stort sett være at ballen beveger seg fortere enn normalt fordi begge skriptene flytter ballen.</label></li> </ul> </section> <section class=activity id=steg-5-forstemann-til-10> <h1 class=activity id=steg-5-forstemann-til-10>Steg 5: Førstemann til 10!</h1> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_12><label for=cbx_12> Her er det mange små skript som starter på meldingene <code>Mål</code> og <code>Redning</code>. Pass på at disse havner på korrekt figur. Det vil si at <code>Ball</code> og <code>Keeper</code> har skript med <code class=b>stopp [andre skript i figuren v] :: control</code>, <code>Leo</code> har skript hvor han <code class=blocklooks>sier</code> noe, mens Scenen har skript som teller <code class=b>(Mål)</code> og <code class=b>(Redninger)</code></label></p> <p>Dersom elevene vil at også <code>Ball</code> eller <code>Keeper</code> skal si noe kan det være utfordrende på grunn av <code class=blockcontrol>stopp</code>-klossen. En mulig løsning er som følger:</p> <pre class=blocks>når jeg mottar [Redning v]\nsi [Hurra, jeg reddet!]\nstopp [andre skript i figuren v] :: control\n</pre> <p>Det er her viktig å <em>ikke</em> bruke <code class=b>si [Hello!] i (2) sekunder</code> siden den klossen vil gjøre at <code>Ball</code> eller <code>Keeper</code> ikke slutter å bevege seg før etter 2 sekunder. For at snakkeboblen skal bli borte kan man bruke en <code class=b>si []</code>-kloss (uten tekst). Denne kan legges øverst i <code class=b>når grønt flagg klikkes</code>- eller <code class=b>når jeg mottar [Nytt spark v]</code>-skriptet.</p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_13><label for=cbx_13> For enkelhets skyld settes aldri retningen på <code>Ball</code> i dette prosjektet. Siden ballen aldri forandrer retning - den beveger seg alltid horisontalt fra venstre mot høyre - er dette sjelden et problem. Men dersom elevene har endret retning på <code>Ball</code> slik at den spretter på skrå over skjermen må retningen tilbakestilles. Dette gjøres enklest ved å klikke på klossen <code class=b>pek i retning (90 v)</code> (eller ved å legge denne klossen øverst i <code>Ball</code> sitt hovedskript).</label></p> </li> </ul> <section class=challenge id=variasjoner> <h2 class=challenge id=variasjoner>Variasjoner</h2> <p>Dersom elevene allerede er komfortable med Scratch er dette prosjektet en bra anledning for å snakke om hvordan man gir forskjellige figurer en unik oppførsel ved å legge ulike skript på dem.</p> <p>Et viktig konsept i Scratch er at man koder ved å beskrive egenskapene (utseende, posisjon, retning, osv.) og oppførselen (skript) til figurer. På fagspråket kalles dette <strong>objektorientert programmering</strong> (mer presist er Scratch <em>prototypeorientert programmering</em>, men forskjellen er ikke relevant her). Dette virker så naturlig at elevene sjelden bevisst tenker på dette, og samtidig skaper det sjelden problemer.</p> <p>Dette er et introduksjonsprosjekt, og elevene ledes derfor ganske detaljert gjennom hvordan spillet skal programmeres. Det er likevel rom for en del kreativitet. Elevene kan gjerne oppfordres til å</p> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_14><label for=cbx_14> velge sine egne figurer og bakgrunner. <code>Leo</code> trenger absolutt ikke å være en katt, og det har blitt scoret mange mål med noe annet enn en fotball.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_15><label for=cbx_15> eksperimentere med hastigheten til <code>Ball</code> og <code>Keeper</code>. Ved å endre på tallene i <code class=b>gå () steg</code>-klossene vil figurene flytte seg saktere eller raskere. Det er nyttig læring å teste effekten av slike endringer, og observere hvordan vanskelighetsgraden i spillet forandrer seg (se også boksen <strong>Endre farten</strong> på slutten av steg 4).</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_16><label for=cbx_16> forandre på tekstene i snakkeboblene til <code>Leo</code>, eller tekstene som vises når man vinner eller taper spillet.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_17><label for=cbx_17> legge på passende lydeffekter. Dette nevnes i oppgaven mot slutten av steg 5, men om elevene har litt erfaring med Scratch fra tidligere kan de gjerne gjøre dette underveis i programmeringen også.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_18><label for=cbx_18> eksperimentere med objektorientert programmering:</label></p> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_19><label for=cbx_19> Start et nytt Scratchprosjekt ved å klikke <code>Programmering</code> fra hovedsiden, eller <code>Ny</code> i <code>Fil</code>-menyen.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_20><label for=cbx_20> Legg til en ekstra figur - for eksempel <code>Bat1</code> - slik at det er to figurer i prosjektet. Dra dem rundt på scenen slik figurene er i hvert sitt hjørne.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_21><label for=cbx_21> Spør elevene hvordan de vil kode at katten beveger seg mot flaggermusa (den andre figuren)? Spesielt, pass på at de er bevisst hvilken figur som må programmeres (<em>Katten</em>). Spør om det det samme kan programmeres ved å legge et skript på den andre figuren (<em>Nei, siden Katten beveger seg er det Kattens oppførsel vi må beskrive</em>).</label></p> <pre class=blocks>for alltid\n    pek mot [Bat1 v]\n    gå (10) steg\nslutt\n</pre> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_22><label for=cbx_22> Hvordan kan vi programmere at flaggermusa rømmer fra katten når katten tar (berører) den? Igjen, hvilken figur må programmeres? Kanskje begge? <em>Vi må programmere flaggermusa siden den rømmer (oppførsel).</em> Her trenger vi ikke noe nytt program for katten så lenge den ikke reagerer på at den berører flaggermusa (<em>ingen ny oppførsel å beskrive</em>).</label></p> <p>Det er mange måter å skrive kode for at flaggermusa rømmer. Det følgende er et eksempel (husk at koden hører til flaggermusa):</p> <pre class=blocks>for alltid\n    vent til &lt;berører [Sprite1 v]&gt;\n    gli (0.2) sekunder til x: (tilfeldig tall fra (-240) til (240)) y: (tilfeldig tall fra (-180) til (180))\nslutt\n</pre> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_23><label for=cbx_23> Spør elevene om de kan tenke seg noen annen måte (enn objektorientert) å programmere på? Hvor man ikke knytter skriptene til figurene?</label></p> <p>Et eksempel på en annen type programmering er <strong>imperativ programmering</strong> hvor programmer skrives som en serie kommandoer uten at det skilles mellom hvilken figur som kommanderes. I et slikt språk ville de to skriptene over skrives som <em>ett</em> skript omtrent som dette (ikke alle disse klossene eksisterer i Scratch):</p> <pre class=blocks>for alltid\n    flytt [katten v] mot [flaggermusa v] :: motion\n    hvis &lt;[katten v] berører [flaggermusa v] :: sensing&gt;\n        flytt [flaggermusa v] til x: (tilfeldig tall fra (-240) til (240)) y: (tilfeldig tall fra (-180) til (180)) :: motion\n    slutt\nslutt\n</pre> <p>Vis gjerne denne koden til elevene. I tillegg til at det bare er ett skript, hvilke andre forskjeller ser de? <em>Den andre store forskjellen er at man alltid må fortelle hvilken figur som skal utføre kommandoene. Dette er underforstått i Scratch</em>.</p> </li> </ul> </li> </ul> </section> </section> '}});