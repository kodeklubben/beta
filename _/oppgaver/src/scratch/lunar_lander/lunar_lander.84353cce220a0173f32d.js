webpackJsonp([73,429],{252:function(e,l,t){e.exports=t.p+"_/oppgaver/src/scratch/lunar_lander/lunar_lander.a7c25d.png"},253:function(e,l,t){e.exports=t.p+"_/oppgaver/src/scratch/lunar_lander/sinus_cosinus.f1cb1b.png"},1632:function(e,l,t){e.exports={frontmatter:t(633),content:t(2823)}},2823:function(e,l,t){e.exports="<section class=intro id=introduksjon> <h1 class=intro id=introduksjon>Introduksjon</h1> <p>Lunar Lander ble opprinnelig utviklet på slutten av 1970-tallet. Målet med spillet er å lande et romskip på månen. Selve kontrollen av romskipet ble videreført i spillet Asteroids som ble utgitt året etter.</p> <figure><img src="+t(252)+' alt=""></figure> </section> <section class=activity id=oversikt-over-prosjektet> <h1 class=activity id=oversikt-over-prosjektet>Oversikt over prosjektet</h1> <p><em>Mesteparten av kodingen av Lunar Lander skal du gjøre selv. I Lunar Lander vil vi spesielt bruke litt tid på gjøre den fysiske modelleringen av romskipet ganske realistisk.</em></p> <section class=check id=plan> <h2 class=check id=plan>Plan</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_0><label for=cbx_0> Et flyvende romskip</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_1><label for=cbx_1> Vi ankommer månen</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_2><label for=cbx_2> Klar for landing</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_3><label for=cbx_3> Begrenset drivstoff, flere landingsplasser og andre utfordringer</label></p> </li> </ul> </section> </section> <section class=activity id=steg-1-et-flyvende-romskip> <h1 class=activity id=steg-1-et-flyvende-romskip>Steg 1: Et flyvende romskip</h1> <p>Vi skal nå programmere et romskip som flyr rundt på skjermen. For å ha kontroll på bevegelsen vil vi bruke to variable, <code class=blockdata>fartX</code> og <code class=blockdata>fartY</code>, som beskriver hvor raskt romskipet beveger seg henholdsvis sidelengs og opp-og-ned. Ved å bruke begge disse samtidig vil romskipet kunne bevege seg i hvilken som helst retning.</p> <p>Utfordringen i programmeringen av spillet er at romskipet kan rotere uavhengig av hvilken retning det faktisk flyr. Når spilleren trykker pil-opp for å bruke motoren vil vi gi romskipet ekstra fart i den retningen det peker. Det betyr at vi må fordele farten i romskipets retning i hvor mye sidelengs fart det får, og hvor mye av farten som går opp eller ned.</p> <p>Dette virker umiddelbart kanskje litt vanskelig, men det er akkurat dette de matematiske funksjonene <code>sinus</code> og <code>cosinus</code> gjør. I funksjonen nedenfor forteller for eksempel <code>cosinus(vinkel)</code> oss hvor lang den vannrette streken er i forhold til den skrå streken.</p> <figure><img src='+t(253)+' alt=""></figure> <section class=check id=sjekkliste> <h2 class=check id=sjekkliste>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_4><label for=cbx_4> Start et nytt prosjekt. Slett kattefiguren.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_5><label for=cbx_5> Legg til en romskip-figur. Du kan gjerne bruke <code>Romfart/Spaceship</code>.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_6><label for=cbx_6> Lag romskipet ganske lite. Du kan for eksempel bruke</label></p> <pre class=blocks>sett størrelse til (20) %\n</pre> <p>rett etter at det grønne flagget er klikket.</p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_7><label for=cbx_7> Lag to nye variable, <code class=blockdata>fartX</code> og <code class=blockdata>fartY</code> som gjelder kun for denne romskip-figuren.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_8><label for=cbx_8> Vi lager først hovedløkken som lar romskipet falle, kun påvirket av tyngdekraften. Skriv denne koden:</label></p> <pre class=blocks>når jeg mottar [Nytt spill v]\ngå til x: (0) y: (175)\npek i retning (90 v)\nsett [fartX v] til [0]\nsett [fartY v] til [0]\nfor alltid\n    endre [fartY v] med (-0.01)\n    endre x med (fartX)\n    endre y med (fartY)\nslutt\n</pre> <p>Om du prøver spillet ditt nå skal romskipet falle stadig raskere nedover skjermen. Prøv å endre litt i klossen</p> <pre class=blocks>endre [fartY v] med (-0.01)\n</pre> <p>Det er denne som modellerer tyngdekraften. Om du forandrer verdien her vil romskipet falle raskere eller tregere, eller det kan til og med falle oppover om du lar tyngdekraften være positiv.</p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_9><label for=cbx_9> Vi vil nå programmere kontrollen av romskipet. Først og fremst vil vi at romskipet vender seg når vi trykker på piltastene mot høyre og venstre.</label></p> <p>Legg til to <code class=blockcontrol>hvis</code>-blokker inne i <code class=blockcontrol>for alltid</code>-løkken hvor du <code class=blockmotion>vender</code> romskipet for eksempel <code>5</code> grader mot høyre eller venstre avhengig av hvilken piltast som trykkes.</p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_10><label for=cbx_10> Når pil opp-tasten trykkes vil vi at romskipet skal få litt ekstra fart i den retningen romskipet peker. Som vi snakket om tidligere kan vi bruke de matematiske funksjonene sinus og cosinus for å få til dette. Legg også til denne blokken inne i <code class=blockcontrol>for alltid</code>-løkken din.</label></p> <pre class=blocks>hvis &lt;tast [pil opp v] trykket?&gt;\n    endre [fartX v] med ((0) - ([cos v] av (retning)))\n    endre [fartY v] med ([sin v] av (retning))\nslutt\n</pre> <p>Du finner både sinus og cosinus-funksjonene som valg på klossen</p> <pre class=blocks>([kvadratrot v] av (9))\n</pre> <p>Vi må bruke <code class=b>((0) - ([cos v] av (retning)))</code> i stedet for <code class=b>([cos v] av (retning))</code> fordi <code class=blockmotion>retning</code> i Scratch måles motsatt vei av hvordan man måler vinkler i matematikk.</p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_11><label for=cbx_11> Prøv spillet ditt. Kan du styre romskipet rundt på skjermen? Dersom du synes romskipet flyr for raskt eller sakte kan du justere <code class=blockdata>endre fart</code>-klossene, for eksempel slik,</label></p> <pre class=blocks>endre [fartX v] med ((0.3) * ((0) - ([cos v] av (retning))))\nendre [fartY v] med ((0.3) * ([sin v] av (retning)))\n</pre> <p>Pass på at du justerer begge klossene med det samme tallet.</p> </li> </ul> </section> </section> <section class=activity id=steg-2-vi-ankommer-manen> <h1 class=activity id=steg-2-vi-ankommer-manen>Steg 2: Vi ankommer månen</h1> <p><em>Nå skal vi legge til et månelandskap hvor spilleren skal prøve å lande.</em></p> <section class=check id=sjekkliste-2> <h2 class=check id=sjekkliste-2>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_12><label for=cbx_12> Lag en ny bakgrunn, hvor du tegner et passende månelandskap. Gjør det så lett eller vanskelig som du selv vil. Tegn også inn en eller flere landingsplasser hvor romskipet skal lande. Vi vil bruke <code class=blocksensing>berører fargen</code>-klosser for å sjekke landingen senere, så det enkleste er å bruke en farge for landskapet og en annen for landingsplassen.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_13><label for=cbx_13> For at romskipet skal slutte å fly når det treffer bakken kan du bytte ut <code class=blockcontrol>for alltid</code>-løkken med en <code class=blockcontrol>gjenta til</code>-løkke hvor du tester på om romskipet <code class=blocksensing>berører fargen</code> du har brukt på landskapet eller på landingsplassen.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_14><label for=cbx_14> Legg også til en <code class=b>send melding [Sjekk landing v]</code> rett etter <code class=blockcontrol>gjenta til</code>-løkken.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_15><label for=cbx_15> Prøv spillet ditt igjen. Du skal nå kunne fly rundt helt til romskipet kommer nær bakken.</label></p> </li> </ul> </section> </section> <section class=activity id=steg-3-klar-for-landing> <h1 class=activity id=steg-3-klar-for-landing>Steg 3: Klar for landing</h1> <p><em>Vi vil til slutt sjekke hvor og hvordan romskipet landet.</em></p> <section class=check id=sjekkliste-3> <h2 class=check id=sjekkliste-3>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_16><label for=cbx_16> Når vi sjekker landingen til romskipet vil vi skille mellom tre forskjellige tilfeller:</label></p> <p><strong>1</strong>: Romskipet landet utenfor landingsplassen (kræsjet).</p> <p><strong>2</strong>: Romskipet landet på landingsplassen, men landet enten på skrå (eller opp-ned) eller for raskt.</p> <p><strong>3</strong>: Romskipet landet perfekt på landingsplassen.</p> <p>Lag et nytt skript på romskipet som starter når det mottar meldingen <code>Sjekk landing</code>. Under denne klossen må du bruke <code class=blockcontrol>hvis</code>- og <code class=blockcontrol>hvis ellers</code>-klosser som tester for de tre tilfellene. Du kan for eksempel si at landingen er perfekt dersom romskipet lander på landingsplassen, <code class=blockdata>fartY</code> er større enn <code>-1.5</code> og <code class=blockmotion>retning</code> er mellom <code>80</code> og <code>100</code>.</p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_17><label for=cbx_17> Finn en måte å fortelle spilleren hvordan romskipet landet. Det enkleste er kanskje å bare bruke en <code class=blocklooks>si</code>-kloss. Men du kan også bruke lydeffekter, forskjellige drakter eller kanskje en tekstplakat som dukker opp.</label></p> </li> </ul> </section> </section> <section class=activity id=steg-4-videreutvikling-av-spillet> <h1 class=activity id=steg-4-videreutvikling-av-spillet>Steg 4: Videreutvikling av spillet</h1> <p><em>Du har nå laget en enkel variant av Lunar Lander. Men prøv å gjøre spillet morsommere ved å videreutvikle det. Du bestemmer selv hvordan du vil jobbe videre, men nedenfor er noen ideer som kanskje kan være til inspirasjon?</em></p> <section class=check id=ideer-til-videreutvikling> <h2 class=check id=ideer-til-videreutvikling>Ideer til videreutvikling</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_18><label for=cbx_18> Lag flere landingsplasser. Kanskje noen kan være vanskeligere enn andre å lande på (enten på grunn av terrenget eller fordi selve landingsplassen er mindre).</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_19><label for=cbx_19> Lag flere bakgrunner eller brett. Du kan enten la spilleren velge seg en bakgrunn å spille på i begynnelsen av spillet, eller gå videre fra brett til brett etterhvert som spilleren klarer å lande.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_20><label for=cbx_20> Du kan også bruke flere bakgrunner som et brett. Dersom romskipet flyr ut av skjermen på høyre side kan du la det dukke opp igjen på venstre side av en annen bakgrunn, og motsatt.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_21><label for=cbx_21> Prøv å animere bruken av motoren. For eksempel, kan du lage en kopi av den flyvende romskip-drakten, og endre den som følger. Klikk først på romskipet, og deretter på den nye knappen som dukker opp nederst i knapperekka (markert med rødt i figuren til venstre). Denne vil dele opp romskip-figuren i mindre deler. Velg en passende flammefarge, og bruk malingsspannet til å fargelegge de tre finnene på romskipet slik at det ser ut som flammer som kommer fra motoren.</label></p> <figure><img src='+t(3553)+' alt=""></figure> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_22><label for=cbx_22> En av utfordringene i det originale Lunar Lander-spillet var at spilleren bare hadde begrenset drivstoff tilgjengelig. Du kan legge til dette i ditt spill ved å lage en <code class=blockdata>Drivstoff</code>-variabel som du lar bli stadig mindre etterhvert som spilleren trykker på piltastene. Dersom romskipet går tomt for drivstoff kan du ignorere tastetrykkene fra spilleren og bare la romskipet sveve til det til slutt kræsjer.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_23><label for=cbx_23> Du kan lage forskjellige bonusting som spilleren kan plukke opp. For å gjøre det litt utfordrende kan du la disse ligge på måneoverflaten slik at spilleren må manøvrere forsiktig for å få tak i dem. Eksempler på slike bonusting kan være ekstra drivstoff, bonuspoeng, større landingsplass og så videre.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_24><label for=cbx_24> En større endring i spillet kan være at landingsplassen er skjult under bakken når spillet begynner, og spilleren må grave denne frem ved å slippe bomber fra romskipet. Du kan implementere dette for eksempel ved bruk av noen av klossene under <code class=blockpen>Penn</code>-kategorien.</label></p> </li> </ul> </section> </section> '},3553:function(e,l,t){e.exports=t.p+"_/oppgaver/src/scratch/lunar_lander/animer_romskip.980146.png"}});