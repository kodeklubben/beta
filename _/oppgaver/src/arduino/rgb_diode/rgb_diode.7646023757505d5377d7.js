webpackJsonp([104,429],{1331:function(e,s,n){e.exports={frontmatter:n(332),content:n(2508)}},2508:function(e,s,n){e.exports="<section class=intro id=introduksjon> <h1 class=intro id=introduksjon>Introduksjon</h1> <p>I denne oppgaven skal vi se på å få en RGB-lysdiode til å lyse.</p> </section> <section class=activity id=steg-1-finn-frem-utstyr> <h1 class=activity id=steg-1-finn-frem-utstyr>Steg 1: Finn frem utstyr</h1> <section class=check id=til-denne-oppgaven-trenger-du> <h2 class=check id=til-denne-oppgaven-trenger-du>Til denne oppgaven trenger du</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_0><label for=cbx_0> 1 Arduino Uno</label></li> <li class=task-list-item><input type=checkbox id=cbx_1><label for=cbx_1> 1 breadboard</label></li> <li class=task-list-item><input type=checkbox id=cbx_2><label for=cbx_2> 1 motstand 1k Ohm (Fargekode: brun-svart-rød-gull)</label></li> <li class=task-list-item><input type=checkbox id=cbx_3><label for=cbx_3> 4 ledninger</label></li> <li class=task-list-item><input type=checkbox id=cbx_4><label for=cbx_4> 1 RGB-lysdiode</label></li> </ul> <figure><img src="+n(3239)+" alt=utstyr></figure> </section> </section> <section class=activity id=steg-2-oppkobling> <h1 class=activity id=steg-2-oppkobling>Steg 2: Oppkobling</h1> <figure><img src="+n(3238)+" alt=kobling></figure> </section> <section class=activity id=steg-3-programmering> <h1 class=activity id=steg-3-programmering>Steg 3: Programmering</h1> <pre><code class=cpp><span class=hljs-function><span class=hljs-keyword>void</span> <span class=hljs-title>clear</span><span class=hljs-params>()</span> </span>{\n  <span class=hljs-keyword>auto</span> led = <span class=hljs-number>9</span>;\n  <span class=hljs-keyword>while</span> (led &lt;= <span class=hljs-number>11</span>) {\n    digitalWrite(led, LOW);\n    ++led;\n  }\n}\n\n<span class=hljs-function><span class=hljs-keyword>void</span> <span class=hljs-title>setup</span><span class=hljs-params>()</span> </span>{\n  <span class=hljs-keyword>auto</span> led = <span class=hljs-number>9</span>;\n  <span class=hljs-keyword>while</span> (led &lt;= <span class=hljs-number>11</span>) {\n    pinMode(led, OUTPUT);\n    ++led;\n  }\n  clear();\n}\n\n<span class=hljs-function><span class=hljs-keyword>void</span> <span class=hljs-title>loop</span><span class=hljs-params>()</span> </span>{\n  <span class=hljs-keyword>auto</span> led = <span class=hljs-number>9</span>;\n  <span class=hljs-keyword>while</span> (led &lt;= <span class=hljs-number>11</span>) {\n    clear();\n    digitalWrite(led, HIGH);\n    delay(<span class=hljs-number>1000</span>);\n    ++led;\n  }\n  digitalWrite(<span class=hljs-number>9</span>, HIGH);\n  digitalWrite(<span class=hljs-number>10</span>, HIGH);\n  digitalWrite(<span class=hljs-number>11</span>, HIGH);\n  delay(<span class=hljs-number>1000</span>);\n}\n</code></pre> <section class=protip id=lokker> <h3 class=protip id=lokker><code>while</code>-løkker</h3> <p>I denne kodesnutten ser du at vi bruker <code>while</code>. Dette er en løkke, og brukes for å kjøre samme kode gjentatte ganger.</p> <p><code>while</code> fungerer ved at koden repeteres så lenge uttrykket i parenteser er sant. Du kan tenke på det som en gjentagende <code>if</code>-test.</p> <ul> <li>Som vi ser av koden starter <code>led</code> med verdien 9. Siden 9 er mindre en 11 er uttrykket sant, og vi kjører koden inne i løkka. På slutten av løkka skriver vi <code>++led</code>, som øker verdien av <code>led</code> til 10.</li> <li>Deretter sjekker vi igjen om <code>led &lt;= 11</code>. Siden 10 er mindre enn 11 går vi inn i løkka igjen, og kjører koden igjen. På slutten av løkka økes <code>led</code> på nytt, denne gangen til 11.</li> <li>Når vi så tester <code>led &lt;= 11</code> er <code>led</code> lik 11, som gjør at vi kjører koden enda en gang. På slutten av løkka øker vi nå <code>led</code> til 12.</li> <li>Når vi til slutt sjekker om <code>led &lt;= 11</code> er ikke lenger uttrykket sant, siden 12 er større enn 11. Derfor går vi ikke lenger inn i løkka, men fortsetter videre i funksjonen vi er i.</li> </ul> </section> </section> <section id=lokker-2> <h1 id=lokker-2><code>for</code>-løkker</h1> <p>I eksempelet over skriver vi veldig mange linjer kode for å lage en løkke. Først initialiserer vi en variabel, så har vi en test som sjekker om vi skal kjøre koden i løkka, så endrer vi en variabel for å holde styr på når løkka skal avslutte.</p> <p>Dette er noe som gjøres veldig ofte, så for å skape mindre kode, og kode som er enklere å lese, har vi <code>for</code>-løkker. <code>while</code>-løkkene vi har skrevet ovenfor kan enkelt skrives om til <code>for</code>-løkker slik:</p> <pre><code class=cpp><span class=hljs-keyword>auto</span> led = <span class=hljs-number>9</span>;\n<span class=hljs-keyword>while</span> (led &lt;= <span class=hljs-number>11</span>) {\n  &lt;kode&gt;\n  ++led;\n}\n</code></pre> <pre><code class=cpp><span class=hljs-keyword>for</span> (<span class=hljs-keyword>auto</span> led = <span class=hljs-number>9</span>; led &lt;= <span class=hljs-number>11</span>; ++led) {\n  &lt;kode&gt;\n}\n</code></pre> <section class=challenge id=utfordring> <h3 class=challenge id=utfordring>Utfordring</h3> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_5><label for=cbx_5> Klarer du å skrive om det første programmet i denne oppgaven til å bruke <code>for</code>-løkker istedenfor <code>while</code>-løkker?</label></li> </ul> </section> </section> <section class=activity id=nostede-lokker> <h1 class=activity id=nostede-lokker>Nøstede løkker</h1> <p>Løkker kan brukes inni hverandre.</p> <pre><code class=cpp><span class=hljs-function><span class=hljs-keyword>void</span> <span class=hljs-title>loop</span><span class=hljs-params>()</span> </span>{\n  <span class=hljs-keyword>for</span> (<span class=hljs-keyword>auto</span> led = <span class=hljs-number>9</span>; led &lt;= <span class=hljs-number>11</span>; ++led) {\n    clear();\n    <span class=hljs-keyword>for</span> (<span class=hljs-keyword>auto</span> verdi = <span class=hljs-number>0</span>; verdi &lt; <span class=hljs-number>256</span>; ++verdi) {\n      analogWrite(led, verdi);\n      delay(<span class=hljs-number>5</span>);\n    }\n  }\n}\n</code></pre> <p>Denne koden vil:</p> <ul> <li>Slå av alle fargene</li> <li>Gradvis øke lysintensitet på pinne 9 fra 0 til 255</li> <li>Slå av alle fargene</li> <li>Gradvis øke lysintensitet på pinne 10 fra 0 til 255</li> <li>Slå av alle fargene</li> <li>Gradvis øke lysintensitet på pinne 11 fra 0 til 255</li> </ul> <p>Skriv inn koden og se selv hva den gjør.</p> <section class=challenge id=utfordringer> <h3 class=challenge id=utfordringer>Utfordringer</h3> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_6><label for=cbx_6> Kan du få lysdioden til å først øke så senke fargeintensiteten før den bytter farge? (<code>++i</code> øker i med 1, <code>--i</code> minker i med 1)</label></li> <li class=task-list-item><input type=checkbox id=cbx_7><label for=cbx_7> Kan du få lysdioden til å sykle gjennom alle fargekombinasjonene? (blå, grønn, blå + grønn, rød, rød + blå, rød + grønn, rød + blå + grønn)</label></li> </ul> </section> </section> "},3238:function(e,s,n){e.exports=n.p+"_/oppgaver/src/arduino/rgb_diode/kobling.ba5e45.png"},3239:function(e,s,n){e.exports=n.p+"_/oppgaver/src/arduino/rgb_diode/utstyr.6a2ada.jpeg"}});