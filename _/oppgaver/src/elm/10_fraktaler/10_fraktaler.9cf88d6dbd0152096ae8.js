webpackJsonp([82,429],{1369:function(s,a,n){s.exports={frontmatter:n(370),content:n(2548)}},2292:function(s,a,n){s.exports=n.p+"fa012f1f011acca0cf8ef6c7d2ab453a.svg"},2293:function(s,a,n){s.exports=n.p+"bc1a72f8c3baa9273c7ad636ee8ecc2e.svg"},2548:function(s,a,n){s.exports="<section class=intro id=introduksjon> <h1 class=intro id=introduksjon>Introduksjon</h1> <p>En fraktal er en geometri med et mønster som gjentar seg selv inne i seg selv. Høres ikke det rart ut? I denne oppgaven skal vi lage våre egne.</p> <p>Her er Sierpinski-teppet, som er en fraktal:</p> <figure><img src="+n(3295)+' alt=""></figure> </section> <section class=activity id=steg-1-hvordan-fungerer-sierpinski> <h1 class=activity id=steg-1-hvordan-fungerer-sierpinski>Steg 1: Hvordan fungerer Sierpinski?</h1> <p>Fraktaler følger tre regler:</p> <ul> <li><strong>Startregelen</strong> gir hvor vi skal starte. Med en firkant? En trekant? En strek?</li> <li><strong>Tegneregelen</strong> gir hvordan vi skal tegne på nivået vi er. Fargelegge en bit av firkanten? Splitte en strek i to?</li> <li><strong>Rekursjonsregelen</strong> deler opp figuren vår i mindre biter, som vi kjører på nytt i. Lager firkanten vi tegnet nye firkanter? Lager streken vi tegnet nye streker? Gjenta for hver strek.</li> </ul> <section class=check id=sjekkliste> <h2 class=check id=sjekkliste>Sjekkliste</h2> <p>Gå til <a href=https://en.wikipedia.org/wiki/Sierpinski_carpet>Wikipedia-artikkelen</a> til Sierpinski-teppet. Se på animasjonen.</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_0><label for=cbx_0> Hvordan er teppet før det begynner å bli fargelagt? Dette er <strong>startregelen</strong>.</label></li> <li class=task-list-item><input type=checkbox id=cbx_1><label for=cbx_1> Hva tegner vi i hver firkant? Dette er <strong>tegneregelen</strong>.</label></li> <li class=task-list-item><input type=checkbox id=cbx_2><label for=cbx_2> Hvordan gjentas regelen? Dette er <strong>rekursjonsregelen</strong>.</label></li> </ul> <p>Se på figurene under avsnittet <strong>Process</strong>. Ser du at noe gjentar seg?</p> </section> </section> <section class=activity id=steg-2-tegne-kvadrater-med-svg> <h1 class=activity id=steg-2-tegne-kvadrater-med-svg>Steg 2: Tegne kvadrater med SVG</h1> <p>Nå skal vi begynne å tegne kvadratene teppet:</p> <p><svg width=500 height=500 viewBox="0 0 27 27"><rect x=0 y=0 width=27 height=27 fill=blue></rect><rect x=9 y=9 width=9 height=9 fill=green></rect><rect x=3 y=3 width=3 height=3 fill=green></rect><rect x=12 y=3 width=3 height=3 fill=green></rect><rect x=21 y=3 width=3 height=3 fill=green></rect><rect x=3 y=12 width=3 height=3 fill=green></rect><rect x=21 y=12 width=3 height=3 fill=green></rect><rect x=3 y=21 width=3 height=3 fill=green></rect><rect x=12 y=21 width=3 height=3 fill=green></rect><rect x=21 y=21 width=3 height=3 fill=green></rect></svg></p> <p>Ett kvadrat kan vi tegne slik:</p> <pre><code class=elm><span class=hljs-keyword>import</span> Svg <span class=hljs-keyword>exposing</span> (svg, rect)\n<span class=hljs-keyword>import</span> Svg.Attributes <span class=hljs-keyword>exposing</span> (width, height, viewBox, fill, x, y, width, height)\n\n\n<span class=hljs-title>main</span> =\n    svg\n      [ width <span class=hljs-string>"500"</span>, height <span class=hljs-string>"500"</span>, viewBox <span class=hljs-string>"0 0 27 27"</span> ]\n      [ rect [ x <span class=hljs-string>"0"</span>, y <span class=hljs-string>"0"</span>, width <span class=hljs-string>"27"</span>, height <span class=hljs-string>"27"</span>, fill <span class=hljs-string>"blue"</span> ] - [ ]\n      , rect [ x <span class=hljs-string>"9"</span>, y <span class=hljs-string>"9"</span>, width <span class=hljs-string>"9"</span>, height <span class=hljs-string>"9"</span>, fill <span class=hljs-string>"green"</span> ] - [ ]\n      ]\n</code></pre> <p><svg width=500 height=500 viewBox="0 0 27 27"><rect x=0 y=0 width=27 height=27 fill=blue></rect><rect x=9 y=9 width=9 height=9 fill=green></rect></svg></p> <section class=check id=sjekkliste-2> <h2 class=check id=sjekkliste-2>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_3><label for=cbx_3> Hvordan kan vi da tegne mange kvadrater?</label></li> <li class=task-list-item><input type=checkbox id=cbx_4><label for=cbx_4> Hva bestemmer posisjonen til tallene?</label></li> <li class=task-list-item><input type=checkbox id=cbx_5><label for=cbx_5> Hvor mange store grønne kvadrater har du tegnet?</label></li> <li class=task-list-item><input type=checkbox id=cbx_6><label for=cbx_6> Hvor mange små grønne kvadrater har du tegnet?</label></li> <li class=task-list-item><input type=checkbox id=cbx_7><label for=cbx_7> <strong>Utvid koden til å tegne mange kvadrater</strong>.</label></li> </ul> </section> </section> <section class=activity id=steg-3-datastrukturer> <h1 class=activity id=steg-3-datastrukturer>Steg 3: Datastrukturer</h1> <p>Kan du telle hvor mange kvadrater det finnes i Sierpinski-teppet? Ikke jeg heller. Hmm, gidder vi da å skrive de maaaange linjene SVG for hånd? Nei, vi programmerer!</p> <p>Vi skal nå representere kvadrater med Records i Elm. Records lar oss lage <em>våre egne typer</em>. Vi kommer til å lage en type for punkter og en type for kvadrater.</p> <section class=check id=sjekkliste-3> <h2 class=check id=sjekkliste-3>Sjekkliste</h2> <p>Nå skal du få prøve å lese Elm sine egne læreressurser.</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_8><label for=cbx_8> Gå til <a href=http://elm-lang.org/docs/records>Elm-dokumentasjonen for records</a>. Finner du eksempelet for et punkt?</label></li> </ul> <p>Vi legger til en liten snutt i programmet vårt:</p> <pre><code class=elm><span class=hljs-keyword>import</span> Html <span class=hljs-keyword>exposing</span> (div, text, h1)\n\n<span class=hljs-keyword>import</span> Svg <span class=hljs-keyword>exposing</span> (svg, rect)\n<span class=hljs-keyword>import</span> Svg.Attributes <span class=hljs-keyword>exposing</span> (width, height, viewBox, fill, x, y, width, height)\n\n<span class=hljs-title>myPoint</span> =\n    { x = <span class=hljs-number>9</span>\n    , y = <span class=hljs-number>3</span>\n    }\n\n<span class=hljs-title>main</span> =\n    div []\n      [ h1 [] [ text (toString myPoint) ]\n      , svg\n        [ width <span class=hljs-string>"500"</span>, height <span class=hljs-string>"500"</span>, viewBox <span class=hljs-string>"0 0 27 27"</span> ]\n        [ rect [ x <span class=hljs-string>"0"</span>, y <span class=hljs-string>"0"</span>, width <span class=hljs-string>"27"</span>, height <span class=hljs-string>"27"</span>, fill <span class=hljs-string>"blue"</span> ] - [ ]\n        , rect [ x <span class=hljs-string>"3"</span>, y <span class=hljs-string>"3"</span>, width <span class=hljs-string>"3"</span>, height <span class=hljs-string>"3"</span>, fill <span class=hljs-string>"green"</span> ] - [ ]\n        ]\n      ]\n</code></pre> <p>Nå kan du endre <code>toString myPoint</code> for å skrive ut noe annet.</p> </section> <section class=check id=sjekkliste-4> <h2 class=check id=sjekkliste-4>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_9><label for=cbx_9> Skriv ut kun <code>x</code>-attributten til <code>myPoint</code></label></li> <li class=task-list-item><input type=checkbox id=cbx_10><label for=cbx_10> Lag et annet punkt, <code>yourPoint</code>. Velg koordinater og skriv ut dette i stedet.</label></li> <li class=task-list-item><input type=checkbox id=cbx_11><label for=cbx_11> Lag et tredje punkt, <code>theirPoint</code>. Dette skal du lage <em>ut ifra <code>myPoint</code></em>, men du skal bytte ut x-verdien med <code>0</code>. Se avsnittet <strong>Updating Records</strong> i guiden.</label></li> </ul> <p>Nå skal vi ta steget videre og lage våre egne punkter.</p> <p><strong>Husk!</strong> Du kan bruke linjen <code>[ h1 [] [ text (toString yz) ]</code> til å teste verdier.</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_12><label for=cbx_12> Les de to første eksemplene i avsnittet <strong>Record types</strong>.</label></li> </ul> <p>Her finnes det allerede en <code>Point</code>-type vi kan bruke. Har du definert <code>myPoint</code> og <code>yourPoint</code> på samme måte som det gjøres i guiden?</p> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_13><label for=cbx_13> Skriv inn <code>Point</code>-typen i programmet ditt</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_14><label for=cbx_14> Spesifiser at punktene dine skal være av typen <code>Point</code>:</label></p> <pre><code class=elm><span class=hljs-comment>-- myPoint : Point betyr at myPoint skal være av type Point</span>\n<span class=hljs-title>myPoint</span> : <span class=hljs-type>Point</span>\n<span class=hljs-title>myPoint</span> = <span class=hljs-comment>-- din tidligere løsning</span>\n\n<span class=hljs-comment>-- yourPoint : Point betyr at yourPoint skal være av type Point</span>\n<span class=hljs-title>yourPoint</span> : <span class=hljs-type>Point</span>\n<span class=hljs-title>yourPoint</span> = <span class=hljs-comment>-- din tidligere løsning</span>\n</code></pre> </li> </ul> <p>Klager kompilatoren? Hvorfor/hvorfor ikke? Om den klager betyr det ikke at du har gjort noe feil. Det bare at du og guiden lagde punkter på forskjellig måte.</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_15><label for=cbx_15> Utvid punktene dine med en z-verdi. Hva skjer når du kopilerer? Klarer du tyde feilmeldingen?</label></li> <li class=task-list-item><input type=checkbox id=cbx_16><label for=cbx_16> Lag en ny type: <code>Point3D</code> som også har Z-verdi, og spesifiser at punktene dine skal være av denne typen:</label><pre><code class=elm><span class=hljs-title>myPoint</span> : <span class=hljs-type>Point3D</span>\n<span class=hljs-comment>-- ...</span>\n</code></pre> </li> </ul> <p>Dette får vi bruk for!</p> </section> </section> <section class=activity id=steg-4-datastrukturer-i-datastrukturer> <h1 class=activity id=steg-4-datastrukturer-i-datastrukturer>Steg 4: Datastrukturer i datastrukturer</h1> <p>I steg 3 bygget vi opp datastruktren <code>Point</code> fra to tall av typen <code>Float</code>.</p> <p>Nå skal vi bruke får egen type, <code>Point</code>, til å bygge opp ett kvadrat.</p> <section class=protip id=desimaltall> <h2 class=protip id=desimaltall>Desimaltall</h2> <p>Obs! Her kommer det matte. Viktig for oss nå:</p> <p>Kommatall i Elm har typen <code>Float</code>.</p> <p>Dette har en forklaring:</p> <p>Desimaltall i Elm har typen <code>Float</code>. Float er kort for <em>Floating point number</em>, som på norsk er <em>flyttall</em>. Disse kalles flyttall fordi de har <em>flytende presisjon</em>. Det betyr at vi kan ha et fast antall <em>siffer</em> med nøyaktighet. Vi kan også lage veldig store tall, som 1000 * 1000 * 1000 * 1000 * 10000</p> </section> <section class=check id=sjekkliste-5> <h2 class=check id=sjekkliste-5>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_17><label for=cbx_17> Hva må vi vite om et kvadrat for at vi skal kunne tegne det?</label></li> <li class=task-list-item><input type=checkbox id=cbx_18><label for=cbx_18> Lag typen kvadrat: <code>type alias Square = -- ...</code></label></li> </ul> <p>Nå skal vi tegne kvadratet!</p> <pre><code class=elm><span class=hljs-title>viewSquare</span> square = <span class=hljs-comment>-- ...</span>\n</code></pre> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_19><label for=cbx_19> Lag funksjonen <code>viewSquare</code>. Bruk <code>rect</code> fra SVG som du har brukt tidligere.</label></li> </ul> <p><strong>Obs!</strong> Når vi tegner kvadrater må vi bruke en farge. En måte å løse det på er å ha en <code>color : String</code>-attributt på <code>Square</code>.</p> <p>Her er hvordan jeg bruker min <code>viewSquare</code>:</p> <pre><code class=elm><span class=hljs-title>start</span> =\n  { corner = { x = <span class=hljs-number>0.0</span>\n             , y = <span class=hljs-number>0.0</span>\n             }\n  , width = <span class=hljs-number>27.0</span>\n  , color = <span class=hljs-string>"blue"</span>\n  }\n\n<span class=hljs-title>center</span> =\n  { corner = { x = <span class=hljs-number>9.0</span>\n             , y = <span class=hljs-number>9.0</span>\n             }\n  , width = <span class=hljs-number>9.0</span>\n  , color = <span class=hljs-string>"green"</span>\n  }\n\n\n<span class=hljs-title>main</span> =\n    div []\n      [ h1 [] [ text (toString start)\n              , text (toString center)\n              ]\n      , svg\n        [ width <span class=hljs-string>"500"</span>, height <span class=hljs-string>"500"</span>, viewBox <span class=hljs-string>"0 0 27 27"</span> ]\n        [ viewSquare start\n        , viewSquare center\n        ]\n      ]\n</code></pre> <p>Dette blir seende slik ut på min PC:</p> <div>{ corner = { x = 0, y = 0 }, width = 27, color = "blue" }{ corner = { x = 9, y = 9 }, width = 9, color = "green" }<svg width=500 height=500 viewBox="0 0 27 27"><rect x=0 y=0 width=27 height=27 fill=blue></rect><rect x=9 y=9 width=9 height=9 fill=green></rect></svg></div> <p>Nå har vi <strong>startregelen</strong> i boks! Den er kvadratet <code>start</code>!</p> </section> </section> <section class=activity id=steg-5-senterkvadrat-og> <h1 class=activity id=steg-5-senterkvadrat-og>Steg 5: Senterkvadrat og <code>let</code></h1> <p>Vi kan sette binde navn med <code>let</code>. Her binder vi <code>age</code> til alderen vi regner ut:</p> <pre><code class=elm><span class=hljs-title>describeAge</span> yearNow yearBorn =\n  <span class=hljs-keyword>let</span> age = yearNow - yearBorn\n  <span class=hljs-keyword>in</span> <span class=hljs-string>"The age is "</span> ++ (toString age)\n</code></pre> <p>Vi kan binde flere navn som kan være avhengig av hverandre:</p> <pre><code class=elm><span class=hljs-title>describeHalfAge</span> yearNow yearBorn =\n  <span class=hljs-keyword>let</span> age = yearNow - yearBorn\n      halfAge = age / <span class=hljs-number>2</span>\n  <span class=hljs-keyword>in</span> <span class=hljs-string>"Half the age is "</span> ++ (toString halfAge)\n</code></pre> <section class=check id=sjekkliste-6> <h2 class=check id=sjekkliste-6>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_20><label for=cbx_20> Lag funksjonen <code>describeDoubleAge</code>. Hva skal denne gjøre?</label></li> <li class=task-list-item><input type=checkbox id=cbx_21><label for=cbx_21> Les overskriften <strong>Let expressions</strong> i <a href=http://elm-lang.org/docs/syntax>syntaxguiden</a>. Her er det noen eksempler. Prøv selv!</label></li> </ul> <p>Nå skal vi tilbake til fraktalene våre, vi skal lage den grønne firkanten i sentrum. Denne gangen med kode!</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_22><label for=cbx_22> Lag funksjonen <code>centerSquare</code>. Denne skal ta inn et kvadrat og returnere kvadratet i sentrum av det forrige. Hvilken farge skal det ha?</label></li> </ul> <p>Her er en start:</p> <pre><code class=elm><span class=hljs-title>centerSquare</span> : <span class=hljs-type>Square</span> -&gt; <span class=hljs-type>Square</span>\n<span class=hljs-title>centerSquare</span> old =\n    <span class=hljs-keyword>let</span> x = \n</code></pre> <p>Du skal kunne bruke den slik:</p> <pre><code>&gt; centerSquare\n&lt;function&gt; : Utils.Square -&gt; Utils.Square\n&gt; centerSquare start\n{ <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>9</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>9</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>9</span> } } : Utils.Square\n</code></pre> <p>... hva må x-verdien være om det nye kvadratet skal være i sentrum av det forrige?</p> <p><svg width=500 height=500 viewBox="0 0 27 27"><rect x=0 y=0 width=27 height=27 fill=blue></rect><rect x=9 y=9 width=9 height=9 fill=green></rect></svg></p> <p>Får du til? Prøv selv først.</p> <p>Slik ser min ut:</p> <pre><code class=elm><span class=hljs-title>mkSquare</span> color width corner =\n    { color = color\n    , width = width\n    , corner = corner\n    }\n\n<span class=hljs-title>blueSquare</span> = mkSquare <span class=hljs-string>"blue"</span>\n\n<span class=hljs-title>centerSquare</span> : <span class=hljs-type>Square</span> -&gt; <span class=hljs-type>Square</span>\n<span class=hljs-title>centerSquare</span> old =\n    <span class=hljs-keyword>let</span> x = old.corner.x + old.width/<span class=hljs-number>3</span>\n        y = old.corner.y + old.width/<span class=hljs-number>3</span>\n        w = old.width / <span class=hljs-number>3</span>\n    <span class=hljs-keyword>in</span> blueSquare w (mkPoint x y)\n</code></pre> </section> </section> <section class=activity id=steg-6-funksjoner-fra-og> <h1 class=activity id=steg-6-funksjoner-fra-og>Steg 6: Funksjoner fra <code>List</code> og <code>String</code></h1> <p><code>List.map</code> kjører en funksjon på hvert element i en liste. Eksempel:</p> <pre><code>&gt; add1 x = x + <span class=hljs-number>1</span>\n&lt;<span class=hljs-function><span class=hljs-keyword>function</span></span>&gt; : <span class=hljs-keyword>number</span> -&gt; <span class=hljs-keyword>number</span>\n&gt; List.map add1 [<span class=hljs-number>10</span>, <span class=hljs-number>20</span>, <span class=hljs-number>30</span>]\n[<span class=hljs-number>11</span>,<span class=hljs-number>21</span>,<span class=hljs-number>31</span>] : List <span class=hljs-keyword>number</span>\n&gt; times2 x = x * <span class=hljs-number>2</span>\n&lt;<span class=hljs-function><span class=hljs-keyword>function</span></span>&gt; : <span class=hljs-keyword>number</span> -&gt; <span class=hljs-keyword>number</span>\n&gt; List.map times2 [<span class=hljs-number>10</span>, <span class=hljs-number>20</span>, <span class=hljs-number>30</span>]\n[<span class=hljs-number>20</span>,<span class=hljs-number>40</span>,<span class=hljs-number>60</span>] : List <span class=hljs-keyword>number</span>\n</code></pre> <section class=check id=sjekkliste-7> <h2 class=check id=sjekkliste-7>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_23><label for=cbx_23> Les avnsitet om <code>List.map</code> i <a href=http://package.elm-lang.org/packages/elm-lang/core/latest/List#map>dokumentasjonen til List</a>.</label></li> <li class=task-list-item><input type=checkbox id=cbx_24><label for=cbx_24> Bruk <code>List.map</code> til å lage listen <code>[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;]</code></label></li> </ul> <p><code>List.range</code> kan lage en liste med tall. Eksempel:</p> <pre><code>&gt; <span class=hljs-keyword>List</span>.map <span class=hljs-keyword>toString</span> (<span class=hljs-keyword>List</span>.<span class=hljs-keyword>range</span> 1 4)\n[<span class=hljs-string>"1"</span>,<span class=hljs-string>"2"</span>,<span class=hljs-string>"3"</span>,<span class=hljs-string>"4"</span>] : <span class=hljs-keyword>List</span> <span class=hljs-built_in>String</span>\n&gt; <span class=hljs-keyword>List</span>.<span class=hljs-keyword>range</span> 5 10\n[5,6,7,8,9,10] : <span class=hljs-keyword>List</span> Int\n&gt; <span class=hljs-keyword>List</span>.<span class=hljs-keyword>range</span> 0 3\n[0,1,2,3] : <span class=hljs-keyword>List</span> Int\n</code></pre> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_25><label for=cbx_25> Les avsnittet om <code>List.range</code> i <a href=http://package.elm-lang.org/packages/elm-lang/core/latest/List#range>dokumentasjonen til List</a></label></li> <li class=task-list-item><input type=checkbox id=cbx_26><label for=cbx_26> Bruk <code>List.map</code> og <code>List.range</code> til å lage denne store listen:</label></li> </ul> <pre><code class=elm>[<span class=hljs-string>"0"</span>,<span class=hljs-string>"1"</span>,<span class=hljs-string>"2"</span>,<span class=hljs-string>"3"</span>,<span class=hljs-string>"4"</span>,<span class=hljs-string>"5"</span>,<span class=hljs-string>"6"</span>,<span class=hljs-string>"7"</span>,<span class=hljs-string>"8"</span>,<span class=hljs-string>"9"</span>,<span class=hljs-string>"10"</span>,<span class=hljs-string>"11"</span>,<span class=hljs-string>"12"</span>,<span class=hljs-string>"13"</span>,<span class=hljs-string>"14"</span>\n,<span class=hljs-string>"15"</span>,<span class=hljs-string>"16"</span>,<span class=hljs-string>"17"</span>,<span class=hljs-string>"18"</span>,<span class=hljs-string>"19"</span>,<span class=hljs-string>"20"</span>,<span class=hljs-string>"21"</span>,<span class=hljs-string>"22"</span>,<span class=hljs-string>"23"</span>,<span class=hljs-string>"24"</span>,<span class=hljs-string>"25"</span>,<span class=hljs-string>"26"</span>,<span class=hljs-string>"27"</span>\n,<span class=hljs-string>"28"</span>,<span class=hljs-string>"29"</span>,<span class=hljs-string>"30"</span>]\n</code></pre> <p>Vi innfører enda en nyttig funksjon: <code>String.join</code>. Denne bygger opp tekst fra en liste.</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_27><label for=cbx_27> Les dokumentasjonen til <code>String.join</code> i <a href=http://package.elm-lang.org/packages/elm-lang/core/latest/String#join>dokumentasjonen til String</a></label></li> <li class=task-list-item><input type=checkbox id=cbx_28><label for=cbx_28> Lag funksjonen <code>sayTo</code>. Den skal kunne brukes slik:</label></li> </ul> <pre><code>&gt; sayTo 10\n"1 og<span class=hljs-number> 2 </span>og<span class=hljs-number> 3 </span>og<span class=hljs-number> 4 </span>og<span class=hljs-number> 5 </span>og<span class=hljs-number> 6 </span>og<span class=hljs-number> 7 </span>og<span class=hljs-number> 8 </span>og<span class=hljs-number> 9 </span>og 10" : String\n&gt; sayTo 3\n"1 og<span class=hljs-number> 2 </span>og 3" : String\n</code></pre> <p>Bra! Gi deg selv en klapp på skulderen.</p> </section> </section> <section class=activity id=steg-7-kvadrater-langs-kanten> <h1 class=activity id=steg-7-kvadrater-langs-kanten>Steg 7: Kvadrater langs kanten</h1> <p>Nå skal vi finne kvadratene langs kanten. Hvor mange blir det? Tell de røde:</p> <p><svg width=500 height=500 viewBox="0 0 27 27"><rect x=0 y=0 width=27 height=27 fill=blue></rect><rect x=9 y=9 width=9 height=9 fill=green></rect><rect x=3 y=3 width=3 height=3 fill=red></rect><rect x=12 y=3 width=3 height=3 fill=red></rect><rect x=21 y=3 width=3 height=3 fill=red></rect><rect x=3 y=12 width=3 height=3 fill=red></rect><rect x=21 y=12 width=3 height=3 fill=red></rect><rect x=3 y=21 width=3 height=3 fill=red></rect><rect x=12 y=21 width=3 height=3 fill=red></rect><rect x=21 y=21 width=3 height=3 fill=red></rect></svg></p> <p><strong>Obs!</strong> Denne er en utfording. Ta deg god tid.</p> <section class=check id=sjekkliste-8> <h2 class=check id=sjekkliste-8>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_29><label for=cbx_29> Lag funksjonen <code>borderSquares</code>. Denne skal vi kunne bruke slik:</label></li> </ul> <pre><code>&gt; start\n{ <span class=hljs-attr>color</span> = <span class=hljs-string>"green"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>729</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>0</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>0</span> } } : Utils.Square\n&gt; borderSquares start\n[{ <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>0</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>0</span> } }\n,{ <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>0</span> } }\n,{ <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>486</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>0</span> } }\n,{ <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>0</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>243</span> } }\n,{ <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>486</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>243</span> } }\n,{ <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>0</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>486</span> } }\n,{ <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>486</span> } }\n,{ <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>486</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>486</span> } }]\n    : List Utils.Square\n</code></pre> <p>Får du til? Prøv selv først.</p> <p>Slik ser min ut:</p> <pre><code class=elm><span class=hljs-title>borderSquares</span> : <span class=hljs-type>Square</span> -&gt; <span class=hljs-type>List</span> <span class=hljs-type>Square</span>\n<span class=hljs-title>borderSquares</span> old =\n    <span class=hljs-keyword>let</span> additions = [ (<span class=hljs-number>0</span>,<span class=hljs-number>0</span>) <span class=hljs-comment>-- First row</span>\n                    , (<span class=hljs-number>1</span>,<span class=hljs-number>0</span>)\n                    , (<span class=hljs-number>2</span>,<span class=hljs-number>0</span>)\n                    , (<span class=hljs-number>0</span>,<span class=hljs-number>1</span>) <span class=hljs-comment>-- Second row</span>\n                    , (<span class=hljs-number>2</span>,<span class=hljs-number>1</span>)\n                    , (<span class=hljs-number>0</span>,<span class=hljs-number>2</span>) <span class=hljs-comment>-- Third row</span>\n                    , (<span class=hljs-number>1</span>,<span class=hljs-number>2</span>)\n                    , (<span class=hljs-number>2</span>,<span class=hljs-number>2</span>)\n                    ]\n        w = old.width / <span class=hljs-number>3</span>\n        mkBorderSquare (fx,fy) =\n            <span class=hljs-keyword>let</span> x = old.corner.x + w*fx\n                y = old.corner.y + w*fy\n            <span class=hljs-keyword>in</span> blueSquare w (mkPoint x y)\n    <span class=hljs-keyword>in</span> <span class=hljs-type>List</span>.map mkBorderSquare additions\n</code></pre> </section> </section> <section class=activity id=stopp-hva-var-det-vi-skulle-igjen> <h1 class=activity id=stopp-hva-var-det-vi-skulle-igjen>Stopp! Hva var det vi skulle igjen?</h1> <p><strong>Nivå 1</strong> har vi klart:</p> <p><svg width=100% viewBox="0 0 729 729"><rect x=0 y=0 width=729 height=729 fill=green></rect><rect x=243 y=243 width=243 height=243 fill=blue></rect></svg></p> <p><strong>Nivå 2</strong> har vi også klart når vi har gjort Steg 7:</p> <p><svg width=100% viewBox="0 0 729 729"><rect x=0 y=0 width=729 height=729 fill=green></rect><rect x=243 y=243 width=243 height=243 fill=blue></rect><rect x=81 y=81 width=81 height=81 fill=blue></rect><rect x=324 y=81 width=81 height=81 fill=blue></rect><rect x=567 y=81 width=81 height=81 fill=blue></rect><rect x=81 y=324 width=81 height=81 fill=blue></rect><rect x=567 y=324 width=81 height=81 fill=blue></rect><rect x=81 y=567 width=81 height=81 fill=blue></rect><rect x=324 y=567 width=81 height=81 fill=blue></rect><rect x=567 y=567 width=81 height=81 fill=blue></rect></svg></p> <p>Men videre blir det vanskeligere. Hvordan skal vi få til steg 3 og steg 4 på en elegant måte?</p> <p><strong>Nivå 3</strong>:</p> <p> <img src='+n(2292)+"> </p> <p><strong>Nivå 4</strong>:</p> <p> <img src="+n(2293)+'> </p> <p>Først lager vi én firkant. Så vil vi lage de åtte små firkanene som følger denne ene. Så vil vi for hver av de åtte nye gjøre det samme! Da får vi 8*8=64 nye små firkanter. Så vil vi <em>igjen</em> for hver av de 64 nye firkantene tegne åtte nye firkanter.</p> <p>I nivå 1 lager vi <strong>1</strong> ny firkant.</p> <p>I nivå 2 lager vi <strong>8</strong> nye firkanter.</p> <p>I nivå 3 lager vi <strong>8 * 8 = 64</strong> nye firkanter.</p> <p>Bruk <code>elm repl</code> til å regne ut disse:</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_30><label for=cbx_30> Hvor mange nye firkanter lager vi i nivå <strong>4</strong>?</label></li> <li class=task-list-item><input type=checkbox id=cbx_31><label for=cbx_31> Hvor mange nye firkanter lager vi i nivå <strong>5</strong>?</label></li> <li class=task-list-item><input type=checkbox id=cbx_32><label for=cbx_32> Hvor mange nye firkanter lager vi i nivå <strong>6</strong>?</label></li> </ul> <p>Klarer du å se et mønster?</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_33><label for=cbx_33> Hvor mange nye firkanter lager vi i nivå <strong>x</strong>?</label></li> </ul> </section> <section class=activity id=steg-8-og> <h1 class=activity id=steg-8-og>Steg 8: <code>concat</code> og <code>map</code></h1> <p>Vi skal trene litt før vi går videre.</p> <section class=check id=sjekkliste-9> <h2 class=check id=sjekkliste-9>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_34><label for=cbx_34> Lag filen Tall.elm. Legg inn dette i toppen:</label></p> <pre><code class=elm><span class=hljs-keyword>module</span> Tall <span class=hljs-keyword>exposing</span> (..)\n\n<span class=hljs-title>hei</span> = <span class=hljs-string>"Hei!"</span>\n</code></pre> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_35><label for=cbx_35> Start <code>elm repl</code> fra kommandovindu i samme mappe</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_36><label for=cbx_36> Importer alle funksjonene fra <code>Tall.elm</code> fra <code>elm repl</code>:</label></p> <pre><code class=text>---- elm-repl <span class=hljs-number>0.18</span>.<span class=hljs-number>0</span> -----------------------------------------------------------\n:help <span class=hljs-keyword>for</span> help, :<span class=hljs-keyword>exit</span> to <span class=hljs-keyword>exit</span>, more at &lt;https:<span class=hljs-regexp>//gi</span>thub.com<span class=hljs-regexp>/elm-lang/</span>elm-repl&gt;\n--------------------------------------------------------------------------------\n&gt; import Tall exposing (..)\n&gt; hei\n<span class=hljs-string>"Hei!"</span> : String\n</code></pre> </li> </ul> <p><strong>Får du til? Bra!</strong></p> <p>Nå skal vi prøve oss på et problem fra matematikken:</p> <p><em>Er det mulig å liste opp alle desimaltall mellom 0 og 1?</em></p> <p>... gitt at vi har uendelig god tid. Hmm! La oss prøve, men begrense oss på antall desimaler i starten.</p> <p>Dette kunne vært første steg:</p> <pre><code class=text>0<span class=hljs-selector-class>.0</span>\n0<span class=hljs-selector-class>.1</span>\n0<span class=hljs-selector-class>.2</span>\n0<span class=hljs-selector-class>.3</span>\n0<span class=hljs-selector-class>.4</span>\n0<span class=hljs-selector-class>.5</span>\n0<span class=hljs-selector-class>.6</span>\n0<span class=hljs-selector-class>.7</span>\n0<span class=hljs-selector-class>.8</span>\n0<span class=hljs-selector-class>.9</span>\n</code></pre> </section> <section class=check id=sjekkliste-10> <h2 class=check id=sjekkliste-10>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_37><label for=cbx_37> Lag <code>sifre</code> for å spare på 0-9:</label></p> <pre><code class=elm>&gt; sifre\n[<span class=hljs-string>"0"</span>,<span class=hljs-string>"1"</span>,<span class=hljs-string>"2"</span>,<span class=hljs-string>"3"</span>,<span class=hljs-string>"4"</span>,<span class=hljs-string>"5"</span>,<span class=hljs-string>"6"</span>,<span class=hljs-string>"7"</span>,<span class=hljs-string>"8"</span>,<span class=hljs-string>"9"</span>] : <span class=hljs-type>List</span> <span class=hljs-type>String</span>\n</code></pre> </li> </ul> <p>Prøv selv først!</p> <p>Her er hva jeg gjorde:</p> <pre><code class=elm><span class=hljs-title>sifre</span> =\n    <span class=hljs-keyword>let</span> nullTilNi = <span class=hljs-type>List</span>.range <span class=hljs-number>0</span> <span class=hljs-number>9</span>\n    <span class=hljs-keyword>in</span> <span class=hljs-type>List</span>.map toString nullTilNi\n</code></pre> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_38><label for=cbx_38> Lag <code>ettSifferBak</code> som tar inn starten på tallet og legger på sifrene 0-9 på slutten:</label></p> <pre><code class=elm>&gt; ettSifferBak\n&lt;function&gt; : <span class=hljs-type>String</span> -&gt; <span class=hljs-type>List</span> <span class=hljs-type>String</span>\n&gt; ettSifferBak <span class=hljs-string>"0."</span>\n[<span class=hljs-string>"0.0"</span>,<span class=hljs-string>"0.1"</span>,<span class=hljs-string>"0.2"</span>,<span class=hljs-string>"0.3"</span>,<span class=hljs-string>"0.4"</span>,<span class=hljs-string>"0.5"</span>,<span class=hljs-string>"0.6"</span>,<span class=hljs-string>"0.7"</span>,<span class=hljs-string>"0.8"</span>,<span class=hljs-string>"0.9"</span>] : <span class=hljs-type>List</span> <span class=hljs-type>String</span>\n&gt; ettSifferBak <span class=hljs-string>"tull"</span>\n[<span class=hljs-string>"tull0"</span>,<span class=hljs-string>"tull1"</span>,<span class=hljs-string>"tull2"</span>,<span class=hljs-string>"tull3"</span>,<span class=hljs-string>"tull4"</span>,<span class=hljs-string>"tull5"</span>,<span class=hljs-string>"tull6"</span>,<span class=hljs-string>"tull7"</span>,<span class=hljs-string>"tull8"</span>,<span class=hljs-string>"tull9"</span>]\n    : <span class=hljs-type>List</span> <span class=hljs-type>String</span>\n</code></pre> </li> </ul> <p>Slik gjorde jeg det:</p> <pre><code class=elm><span class=hljs-title>ettSifferBak</span> start =\n    <span class=hljs-keyword>let</span> begynnMedStart slutt = start ++ slutt\n    <span class=hljs-keyword>in</span> <span class=hljs-type>List</span>.map begynnMedStart sifre\n</code></pre> <p>Nå kommer trikset for å gå dypere: For hver mulige begynnelse må vi lage alle løsninger, og slå sammen disse.</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_39><label for=cbx_39> Lag <code>sifreAvLengde</code> som tar inn hvor mange sifre som skal legges på og begynnelsen, og gir tilbake alle mulighetene.</label></li> </ul> <pre><code class=elm>&gt; sifreAvLengde <span class=hljs-number>0</span> <span class=hljs-string>""</span>\n[<span class=hljs-string>""</span>] : <span class=hljs-type>List</span> <span class=hljs-type>String</span>\n&gt; sifreAvLengde <span class=hljs-number>0</span> <span class=hljs-string>"0."</span>\n[<span class=hljs-string>"0."</span>] : <span class=hljs-type>List</span> <span class=hljs-type>String</span>\n&gt; sifreAvLengde <span class=hljs-number>1</span> <span class=hljs-string>"0."</span>\n[<span class=hljs-string>"0.0"</span>,<span class=hljs-string>"0.1"</span>,<span class=hljs-string>"0.2"</span>,<span class=hljs-string>"0.3"</span>,<span class=hljs-string>"0.4"</span>,<span class=hljs-string>"0.5"</span>,<span class=hljs-string>"0.6"</span>,<span class=hljs-string>"0.7"</span>,<span class=hljs-string>"0.8"</span>,<span class=hljs-string>"0.9"</span>] : <span class=hljs-type>List</span> <span class=hljs-type>String</span>\n&gt; sifreAvLengde <span class=hljs-number>1</span> <span class=hljs-string>"1."</span>\n[<span class=hljs-string>"1.0"</span>,<span class=hljs-string>"1.1"</span>,<span class=hljs-string>"1.2"</span>,<span class=hljs-string>"1.3"</span>,<span class=hljs-string>"1.4"</span>,<span class=hljs-string>"1.5"</span>,<span class=hljs-string>"1.6"</span>,<span class=hljs-string>"1.7"</span>,<span class=hljs-string>"1.8"</span>,<span class=hljs-string>"1.9"</span>] : <span class=hljs-type>List</span> <span class=hljs-type>String</span>\n&gt; sifreAvLengde <span class=hljs-number>2</span> <span class=hljs-string>"0."</span>\n[<span class=hljs-string>"0.00"</span>,<span class=hljs-string>"0.01"</span>,<span class=hljs-string>"0.02"</span>,<span class=hljs-string>"0.03"</span>,<span class=hljs-string>"0.04"</span>,<span class=hljs-string>"0.05"</span>,<span class=hljs-string>"0.06"</span>,<span class=hljs-string>"0.07"</span>,<span class=hljs-string>"0.08"</span>,<span class=hljs-string>"0.09"</span>,<span class=hljs-string>"0.10"</span>,<span class=hljs-string>"0.11"</span>,<span class=hljs-string>"0.12"</span>,<span class=hljs-string>"0.13"</span>,<span class=hljs-string>"0.14"</span>,<span class=hljs-string>"0.15"</span>,<span class=hljs-string>"0.16"</span>,<span class=hljs-string>"0.17"</span>,<span class=hljs-string>"0.18"</span>,<span class=hljs-string>"0.19"</span>,<span class=hljs-string>"0.20"</span>,<span class=hljs-string>"0.21"</span>,<span class=hljs-string>"0.22"</span>,<span class=hljs-string>"0.23"</span>,<span class=hljs-string>"0.24"</span>,<span class=hljs-string>"0.25"</span>,<span class=hljs-string>"0.26"</span>,<span class=hljs-string>"0.27"</span>,<span class=hljs-string>"0.28"</span>,<span class=hljs-string>"0.29"</span>,<span class=hljs-string>"0.30"</span>,<span class=hljs-string>"0.31"</span>,<span class=hljs-string>"0.32"</span>,<span class=hljs-string>"0.33"</span>,<span class=hljs-string>"0.34"</span>,<span class=hljs-string>"0.35"</span>,<span class=hljs-string>"0.36"</span>,<span class=hljs-string>"0.37"</span>,<span class=hljs-string>"0.38"</span>,<span class=hljs-string>"0.39"</span>,<span class=hljs-string>"0.40"</span>,<span class=hljs-string>"0.41"</span>,<span class=hljs-string>"0.42"</span>,<span class=hljs-string>"0.43"</span>,<span class=hljs-string>"0.44"</span>,<span class=hljs-string>"0.45"</span>,<span class=hljs-string>"0.46"</span>,<span class=hljs-string>"0.47"</span>,<span class=hljs-string>"0.48"</span>,<span class=hljs-string>"0.49"</span>,<span class=hljs-string>"0.50"</span>,<span class=hljs-string>"0.51"</span>,<span class=hljs-string>"0.52"</span>,<span class=hljs-string>"0.53"</span>,<span class=hljs-string>"0.54"</span>,<span class=hljs-string>"0.55"</span>,<span class=hljs-string>"0.56"</span>,<span class=hljs-string>"0.57"</span>,<span class=hljs-string>"0.58"</span>,<span class=hljs-string>"0.59"</span>,<span class=hljs-string>"0.60"</span>,<span class=hljs-string>"0.61"</span>,<span class=hljs-string>"0.62"</span>,<span class=hljs-string>"0.63"</span>,<span class=hljs-string>"0.64"</span>,<span class=hljs-string>"0.65"</span>,<span class=hljs-string>"0.66"</span>,<span class=hljs-string>"0.67"</span>,<span class=hljs-string>"0.68"</span>,<span class=hljs-string>"0.69"</span>,<span class=hljs-string>"0.70"</span>,<span class=hljs-string>"0.71"</span>,<span class=hljs-string>"0.72"</span>,<span class=hljs-string>"0.73"</span>,<span class=hljs-string>"0.74"</span>,<span class=hljs-string>"0.75"</span>,<span class=hljs-string>"0.76"</span>,<span class=hljs-string>"0.77"</span>,<span class=hljs-string>"0.78"</span>,<span class=hljs-string>"0.79"</span>,<span class=hljs-string>"0.80"</span>,<span class=hljs-string>"0.81"</span>,<span class=hljs-string>"0.82"</span>,<span class=hljs-string>"0.83"</span>,<span class=hljs-string>"0.84"</span>,<span class=hljs-string>"0.85"</span>,<span class=hljs-string>"0.86"</span>,<span class=hljs-string>"0.87"</span>,<span class=hljs-string>"0.88"</span>,<span class=hljs-string>"0.89"</span>,<span class=hljs-string>"0.90"</span>,<span class=hljs-string>"0.91"</span>,<span class=hljs-string>"0.92"</span>,<span class=hljs-string>"0.93"</span>,<span class=hljs-string>"0.94"</span>,<span class=hljs-string>"0.95"</span>,<span class=hljs-string>"0.96"</span>,<span class=hljs-string>"0.97"</span>,<span class=hljs-string>"0.98"</span>,<span class=hljs-string>"0.99"</span>]\n    : <span class=hljs-type>List</span> <span class=hljs-type>String</span>\n</code></pre> <p>Slik gjorde jeg det:</p> <pre><code class=elm><span class=hljs-title>sifreAvLengde</span> n start =\n    <span class=hljs-keyword>if</span> n == <span class=hljs-number>0</span>\n    <span class=hljs-comment>-- Hvis vi ikke vil ha flere tall, gir vi tilbake kun hva vi har.</span>\n    <span class=hljs-keyword>then</span> [start]\n    <span class=hljs-keyword>else</span>\n        <span class=hljs-keyword>let</span>\n            <span class=hljs-comment>-- Liste over alle de nye startene for neste nivå</span>\n            starter = ettSifferBak start\n\n            <span class=hljs-comment>-- Funksjon som tar inn en start og lager alle sluttene.</span>\n            <span class=hljs-comment>-- Hvorfor bruker vi n-1? Hva skjer om vi bruker n i stedet?</span>\n            fortsett nyStart = sifreAvLengde (n<span class=hljs-number>-1</span>) nyStart\n\n            <span class=hljs-comment>-- Lager listene med fortsettelser for 0, 1, 2, ..., i hver sin liste</span>\n            fortsettelser = <span class=hljs-type>List</span>.map fortsett starter\n\n        <span class=hljs-comment>-- Slår sammen fortsettelsene i én liste</span>\n        <span class=hljs-keyword>in</span> <span class=hljs-type>List</span>.concat fortsettelser\n</code></pre> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_40><label for=cbx_40> Bruk <code>sifreAvLengde</code> til å lage <code>desimaler</code>:</label></li> </ul> <pre><code class=elm>&gt; desimaler <span class=hljs-number>0</span>\n[<span class=hljs-string>"0."</span>] : <span class=hljs-type>List</span> <span class=hljs-type>String</span>\n&gt; desimaler <span class=hljs-number>1</span>\n[<span class=hljs-string>"0.0"</span>,<span class=hljs-string>"0.1"</span>,<span class=hljs-string>"0.2"</span>,<span class=hljs-string>"0.3"</span>,<span class=hljs-string>"0.4"</span>,<span class=hljs-string>"0.5"</span>,<span class=hljs-string>"0.6"</span>,<span class=hljs-string>"0.7"</span>,<span class=hljs-string>"0.8"</span>,<span class=hljs-string>"0.9"</span>] : <span class=hljs-type>List</span> <span class=hljs-type>String</span>\n&gt; desimaler <span class=hljs-number>2</span>\n[<span class=hljs-string>"0.00"</span>,<span class=hljs-string>"0.01"</span>,<span class=hljs-string>"0.02"</span>,<span class=hljs-string>"0.03"</span>,<span class=hljs-string>"0.04"</span>,<span class=hljs-string>"0.05"</span>,<span class=hljs-string>"0.06"</span>,<span class=hljs-string>"0.07"</span>,<span class=hljs-string>"0.08"</span>,<span class=hljs-string>"0.09"</span>,<span class=hljs-string>"0.10"</span>,<span class=hljs-string>"0.11"</span>,<span class=hljs-string>"0.12"</span>,<span class=hljs-string>"0.13"</span>,<span class=hljs-string>"0.14"</span>,<span class=hljs-string>"0.15"</span>,<span class=hljs-string>"0.16"</span>,<span class=hljs-string>"0.17"</span>,<span class=hljs-string>"0.18"</span>,<span class=hljs-string>"0.19"</span>,<span class=hljs-string>"0.20"</span>,<span class=hljs-string>"0.21"</span>,<span class=hljs-string>"0.22"</span>,<span class=hljs-string>"0.23"</span>,<span class=hljs-string>"0.24"</span>,<span class=hljs-string>"0.25"</span>,<span class=hljs-string>"0.26"</span>,<span class=hljs-string>"0.27"</span>,<span class=hljs-string>"0.28"</span>,<span class=hljs-string>"0.29"</span>,<span class=hljs-string>"0.30"</span>,<span class=hljs-string>"0.31"</span>,<span class=hljs-string>"0.32"</span>,<span class=hljs-string>"0.33"</span>,<span class=hljs-string>"0.34"</span>,<span class=hljs-string>"0.35"</span>,<span class=hljs-string>"0.36"</span>,<span class=hljs-string>"0.37"</span>,<span class=hljs-string>"0.38"</span>,<span class=hljs-string>"0.39"</span>,<span class=hljs-string>"0.40"</span>,<span class=hljs-string>"0.41"</span>,<span class=hljs-string>"0.42"</span>,<span class=hljs-string>"0.43"</span>,<span class=hljs-string>"0.44"</span>,<span class=hljs-string>"0.45"</span>,<span class=hljs-string>"0.46"</span>,<span class=hljs-string>"0.47"</span>,<span class=hljs-string>"0.48"</span>,<span class=hljs-string>"0.49"</span>,<span class=hljs-string>"0.50"</span>,<span class=hljs-string>"0.51"</span>,<span class=hljs-string>"0.52"</span>,<span class=hljs-string>"0.53"</span>,<span class=hljs-string>"0.54"</span>,<span class=hljs-string>"0.55"</span>,<span class=hljs-string>"0.56"</span>,<span class=hljs-string>"0.57"</span>,<span class=hljs-string>"0.58"</span>,<span class=hljs-string>"0.59"</span>,<span class=hljs-string>"0.60"</span>,<span class=hljs-string>"0.61"</span>,<span class=hljs-string>"0.62"</span>,<span class=hljs-string>"0.63"</span>,<span class=hljs-string>"0.64"</span>,<span class=hljs-string>"0.65"</span>,<span class=hljs-string>"0.66"</span>,<span class=hljs-string>"0.67"</span>,<span class=hljs-string>"0.68"</span>,<span class=hljs-string>"0.69"</span>,<span class=hljs-string>"0.70"</span>,<span class=hljs-string>"0.71"</span>,<span class=hljs-string>"0.72"</span>,<span class=hljs-string>"0.73"</span>,<span class=hljs-string>"0.74"</span>,<span class=hljs-string>"0.75"</span>,<span class=hljs-string>"0.76"</span>,<span class=hljs-string>"0.77"</span>,<span class=hljs-string>"0.78"</span>,<span class=hljs-string>"0.79"</span>,<span class=hljs-string>"0.80"</span>,<span class=hljs-string>"0.81"</span>,<span class=hljs-string>"0.82"</span>,<span class=hljs-string>"0.83"</span>,<span class=hljs-string>"0.84"</span>,<span class=hljs-string>"0.85"</span>,<span class=hljs-string>"0.86"</span>,<span class=hljs-string>"0.87"</span>,<span class=hljs-string>"0.88"</span>,<span class=hljs-string>"0.89"</span>,<span class=hljs-string>"0.90"</span>,<span class=hljs-string>"0.91"</span>,<span class=hljs-string>"0.92"</span>,<span class=hljs-string>"0.93"</span>,<span class=hljs-string>"0.94"</span>,<span class=hljs-string>"0.95"</span>,<span class=hljs-string>"0.96"</span>,<span class=hljs-string>"0.97"</span>,<span class=hljs-string>"0.98"</span>,<span class=hljs-string>"0.99"</span>]\n    : <span class=hljs-type>List</span> <span class=hljs-type>String</span>\n</code></pre> <p>I <code>sifreAvLengde</code> lagde vi først alle resultatene i hver sin liste med <code>List.map</code>, før vi slo listene sammen med <code>List.concat</code>. Her har vi skrevet om koden litt:</p> <pre><code class=elm><span class=hljs-title>sifreAvLengde</span> n start =\n    <span class=hljs-keyword>if</span> n == <span class=hljs-number>0</span>\n    <span class=hljs-comment>-- Hvis vi ikke vil ha flere tall, gir vi tilbake kun hva vi har.</span>\n    <span class=hljs-keyword>then</span> [start]\n    <span class=hljs-keyword>else</span>\n        <span class=hljs-keyword>let</span>\n            <span class=hljs-comment>-- Liste over alle de nye startene for neste nivå</span>\n            starter = ettSifferBak start\n\n            <span class=hljs-comment>-- Funksjon som tar inn en start og lager alle sluttene.</span>\n            <span class=hljs-comment>-- Hvorfor bruker vi n-1? Hva skjer om vi bruker n i stedet?</span>\n            fortsett nyStart = sifreAvLengde (n<span class=hljs-number>-1</span>) nyStart\n\n        <span class=hljs-comment>-- Slår sammen fortsettelsene i én liste</span>\n        <span class=hljs-keyword>in</span> <span class=hljs-type>List</span>.concat (<span class=hljs-type>List</span>.map fortsett starter)\n</code></pre> <p><code>List.concat (List.map funksjon liste)</code> er noe vi ser ofte. Derfor finnes funksjonen <code>concatMap</code> som kjører <code>List.concat</code> på resultatet av en <code>List.map</code>. Da kan vi korte ned litt til:</p> <pre><code class=elm><span class=hljs-title>sifreAvLengde</span> n start =\n    <span class=hljs-keyword>if</span> n == <span class=hljs-number>0</span>\n    <span class=hljs-comment>-- Hvis vi ikke vil ha flere tall, gir vi tilbake kun hva vi har.</span>\n    <span class=hljs-keyword>then</span> [start]\n    <span class=hljs-keyword>else</span>\n        <span class=hljs-keyword>let</span>\n            <span class=hljs-comment>-- Liste over alle de nye startene for neste nivå</span>\n            starter = ettSifferBak start\n\n            <span class=hljs-comment>-- Funksjon som tar inn en start og lager alle sluttene.</span>\n            <span class=hljs-comment>-- Hvorfor bruker vi n-1? Hva skjer om vi bruker n i stedet?</span>\n            fortsett nyStart = sifreAvLengde (n<span class=hljs-number>-1</span>) nyStart\n\n        <span class=hljs-comment>-- Slår sammen fortsettelsene i én liste</span>\n        <span class=hljs-keyword>in</span> <span class=hljs-type>List</span>.concatMap fortsett starter\n</code></pre> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_41><label for=cbx_41> Hvor lange tall kan du skrive ut før PC-en din begynner å gå tregt?</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_42><label for=cbx_42> Hvor mange desimaltall finner du da?</label></p> </li> </ul> <p>Hint: 0.0-0.9 blir 10 tall. 0.00 til 0.99 blir ...? Hva med 0.00000 til 0.99999?</p> </section> <section class=protip id=har-du-hort-om> <h2 class=protip id=har-du-hort-om>Har du hørt om <code>++</code>?</h2> <p><code>++</code> kan slå sammen tekst:</p> <pre><code class=elm>&gt; <span class=hljs-string>"Hei "</span> ++ <span class=hljs-string>"på deg"</span>\n<span class=hljs-string>"Hei på deg"</span> : <span class=hljs-type>String</span>\n</code></pre> <p><code>++</code> kan også slå sammen lister:</p> <pre><code class=elm>&gt; [<span class=hljs-number>1</span>,<span class=hljs-number>2</span>,<span class=hljs-number>3</span>] ++ [<span class=hljs-number>4</span>,<span class=hljs-number>5</span>,<span class=hljs-number>6</span>]\n[<span class=hljs-number>1</span>,<span class=hljs-number>2</span>,<span class=hljs-number>3</span>,<span class=hljs-number>4</span>,<span class=hljs-number>5</span>,<span class=hljs-number>6</span>] : <span class=hljs-type>List</span> number\n</code></pre> </section> </section> <section class=activity id=steg-9-sa-mange-nivaer-vi-vil> <h1 class=activity id=steg-9-sa-mange-nivaer-vi-vil>Steg 9: Så mange nivåer vi vil!</h1> <p>Nå skal vi bruke teknikken fra Steg 8 til å komme til bunns i fraktalen vår.</p> <section class=check id=sjekkliste-11> <h2 class=check id=sjekkliste-11>Sjekkliste</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_43><label for=cbx_43> Lag <code>generateCenterSquares</code>. Denne skal kunne fungere slik:</label></li> </ul> <pre><code class=text>---- elm-repl <span class=hljs-number>0.18</span>.<span class=hljs-number>0</span> -----------------------------------------------------------\n :help for help, :exit to exit, more at &lt;https://github.com/elm-lang/elm-repl&gt;\n--------------------------------------------------------------------------------\n&gt; <span class=hljs-built_in>import</span> Main exposing (..)\n&gt; start\n{ <span class=hljs-attr>color</span> = <span class=hljs-string>"green"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>729</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>0</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>0</span> } } : Main.Square\n&gt; generateCenterSquares <span class=hljs-number>0</span> start\n[] : List Main.Square\n&gt; generateCenterSquares <span class=hljs-number>1</span> start\n[{ <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>243</span> } }]\n    : List Main.Square\n&gt; generateCenterSquares <span class=hljs-number>2</span> start\n[ { <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>243</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>243</span> } },\n  { <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>81</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>81</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>81</span> } },\n  { <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>81</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>324</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>81</span> } },\n  { <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>81</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>567</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>81</span> } },\n  { <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>81</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>81</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>324</span> } },\n  { <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>81</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>567</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>324</span> } },\n  { <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>81</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>81</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>567</span> } },\n  { <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>81</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>324</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>567</span> } },\n  { <span class=hljs-attr>color</span> = <span class=hljs-string>"blue"</span>, <span class=hljs-attr>width</span> = <span class=hljs-number>81</span>, <span class=hljs-attr>corner</span> = { <span class=hljs-attr>x</span> = <span class=hljs-number>567</span>, <span class=hljs-attr>y</span> = <span class=hljs-number>567</span> } }\n]\n    : List Main.Square\n</code></pre> <p>Gikk det greit? Her er slik jeg gjorde det, og hvordan jeg bruker <code>generateCenterSquares</code> i <code>main</code>:</p> <pre><code class=elm><span class=hljs-title>generateCenterSquares</span> : number -&gt; <span class=hljs-type>Square</span> -&gt; <span class=hljs-type>List</span> <span class=hljs-type>Square</span>\n<span class=hljs-title>generateCenterSquares</span> level source =\n    <span class=hljs-keyword>if</span> level == <span class=hljs-number>0</span> <span class=hljs-keyword>then</span> []\n    <span class=hljs-keyword>else</span> <span class=hljs-keyword>let</span> children = <span class=hljs-type>List</span>.concatMap (generateCenterSquares (level - <span class=hljs-number>1</span>)) (borderSquares source)\n         <span class=hljs-keyword>in</span> [centerSquare source] ++ children\n\n\n<span class=hljs-title>main</span> =\n    svg\n      [ width <span class=hljs-string>"100%"</span>, viewBox <span class=hljs-string>"0 0 729 729"</span> ]\n      ( [viewSquare start] ++\n            <span class=hljs-type>List</span>.map viewSquare (generateCenterSquares <span class=hljs-number>3</span> start)\n      )\n</code></pre> </section> </section> ';
},3295:function(s,a,n){s.exports=n.p+"_/oppgaver/src/elm/10_fraktaler/sierpinski.c2160f.png"}});