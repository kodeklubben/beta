webpackJsonp([101,429],{1363:function(e,s,n){e.exports={frontmatter:n(364),content:n(2542)}},2542:function(e,s,n){e.exports='<section class=intro id=introduksjon> <h1 class=intro id=introduksjon>Introduksjon</h1> <p>Input-felter lar brukere skrive inn tekst, tall, datoer og så videre i nettsiden vår. Informasjonen vi får fra brukerne kan vi endre, skrive ut, og kombinere med annen informasjon.</p> </section> <section class=activity id=hente-tekst-fra-brukeren> <h1 class=activity id=hente-tekst-fra-brukeren>Hente tekst fra brukeren</h1> <section class=check id=moduler-og-program> <h2 class=check id=moduler-og-program>Moduler og program</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_0><label for=cbx_0> Øverst i koden vår må vi si hvilke <em>moduler</em> vi skal bruke</label></li> </ul> <pre><code class=elm><span class=hljs-keyword>import</span> Html <span class=hljs-keyword>exposing</span> (<span class=hljs-type>Html</span>, <span class=hljs-type>Attribute</span>, beginnerProgram, text, div, input, button)\n<span class=hljs-keyword>import</span> Html.Attributes <span class=hljs-keyword>exposing</span> (..)\n<span class=hljs-keyword>import</span> Html.Events <span class=hljs-keyword>exposing</span> (onInput, onClick)\n<span class=hljs-keyword>import</span> String\n</code></pre> </section> <section class=check id=modell-meldinger-og-oppdatering> <h2 class=check id=modell-meldinger-og-oppdatering>Modell, meldinger og oppdatering</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_1><label for=cbx_1> Vi oppretter programmet vårt med en <em>modell</em> som inneholder data (<code>model</code>), et <em>brukergrensesnitt</em> hvor vi viser frem data (<code>view</code>) og en funksjon for <em>oppdatering</em> av data (<code>update</code>). Vi kommer tilbake til hvordan vi oppretter disse, skriv inn følgende i koden:</label></li> </ul> <pre><code class=elm><span class=hljs-title>main</span> =\n  beginnerProgram { model = <span class=hljs-string>""</span>, view = view, update = update }\n</code></pre> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_2><label for=cbx_2> Så trenger vi å si hva slags <em>meldinger</em> (<code>Msg</code>) vi skal sende i programmet. Til å begynne med har vi bare én meldingstype, og det er meldingen som sendes når brukeren endrer teksten i input-feltet, her kaller vi den for <code>Endre</code>.</label></li> </ul> <pre><code class=elm><span class=hljs-keyword>type</span> <span class=hljs-type>Msg</span> = <span class=hljs-type>Endre</span> <span class=hljs-type>String</span>\n</code></pre> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_3><label for=cbx_3> Etter det må vi skrive hva som skal skje når teksten oppdateres med en <em>update</em>-funksjon:</label></li> </ul> <pre><code class=elm><span class=hljs-title>update</span> msg model =\n  <span class=hljs-keyword>case</span> msg <span class=hljs-keyword>of</span>\n    <span class=hljs-type>Endre</span> tekst -&gt;\n      tekst\n</code></pre> <p>Nå hentes bare teksten inn, og sendes rett ut igjen. Det er kanskje litt rart, når funksjonen vår heter <code>Endre</code>? La oss endre teksten!</p> <p>For å endre teksten, kan vi bruke innebygde funksjoner i <code>String</code>-modulen.</p> </section> <section class=check id=skriv-ut-teksten> <h2 class=check id=skriv-ut-teksten>Skriv ut teksten</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_4><label for=cbx_4> Til slutt må vi ha et sted som viser teksten, da bruker vi et <em>view</em>:</label></li> </ul> <pre><code class=elm><span class=hljs-title>view</span> model =\n  div []\n    [ input [ placeholder <span class=hljs-string>"Baklengstekst"</span>, onInput <span class=hljs-type>Endre</span> ] []\n    , div - [ ] [ text model ]\n    ]\n</code></pre> <p><code>input [ placeholder &quot;Baklengstekst&quot;, onInput Endre ] []</code> er det som blir til et input-felt. Teksten etter <code>placeholder</code> sier hva som skal stå i feltet før brukeren skriver inn noe. <code>onInput</code> sier hva som skal skje når brukeren skriver inn tekst. I vårt tilfelle sender vi en <code>Endre</code>-melding som hentes inn i <code>update</code>-funksjonen. Når brukeren skriver inn &quot;Teodor&quot;, sendes en melding av typen <code>Endre &quot;Teodor&quot;</code> inn i <code>update</code>-funksjonen.</p> <p>Setter vi alle delene sammen, vil koden vår se slik ut:</p> <pre><code class=elm><span class=hljs-keyword>import</span> Html <span class=hljs-keyword>exposing</span> (<span class=hljs-type>Html</span>, <span class=hljs-type>Attribute</span>, beginnerProgram, text, div, input)\n<span class=hljs-keyword>import</span> Html.Attributes <span class=hljs-keyword>exposing</span> (..)\n<span class=hljs-keyword>import</span> Html.Events <span class=hljs-keyword>exposing</span> (onInput)\n<span class=hljs-keyword>import</span> String\n\n\n<span class=hljs-title>main</span> =\n  beginnerProgram { model = <span class=hljs-string>""</span>, view = view, update = update }\n\n\n<span class=hljs-comment>-- UPDATE</span>\n\n<span class=hljs-keyword>type</span> <span class=hljs-type>Msg</span> = <span class=hljs-type>Endre</span> <span class=hljs-type>String</span>\n\n<span class=hljs-title>update</span> msg model =\n  <span class=hljs-keyword>case</span> msg <span class=hljs-keyword>of</span>\n    <span class=hljs-type>Endre</span> tekst -&gt;\n      <span class=hljs-type>String</span>.reverse tekst\n\n\n<span class=hljs-comment>-- VIEW</span>\n\n<span class=hljs-title>view</span> model =\n  div []\n    [ input [ placeholder <span class=hljs-string>"Baklengstekst"</span>, onInput <span class=hljs-type>Endre</span> ] []\n    , div - [ ] [ text model ]\n    ]\n</code></pre> <section class=protip id=kommentarer> <h3 class=protip id=kommentarer>Kommentarer</h3> <p>I koden over har vi skrevet <code>-- UPDATE</code> og <code>-- VIEW</code>. Det har vi gjort for å gjøre koden mer strukturert og lesbar. Alle linjer som starter med to bindestreker (--) ignoreres i Elm. Dette er hva vi kaller kommentarer! Kommentarer er ment for menneskene som leser koden, enten deg selv eller de du samarbeider med.</p> </section> </section> </section> <section class=activity id=lag-en-setning> <h1 class=activity id=lag-en-setning>Lag en setning</h1> <section class=check id=ny-modell> <h2 class=check id=ny-modell>Ny modell</h2> <p>Nå skal vi lagre en setning i tillegg til teksten som brukeren skriver inn. Da må vi endre <em>modellen</em> vår. Den nye modellen skal se slik ut:</p> <pre><code class=elm>\n<span class=hljs-comment>-- MODEL</span>\n<span class=hljs-title>model</span> =\n  {\n    tekst = <span class=hljs-string>""</span>\n  , setning = <span class=hljs-string>""</span>\n  }\n\n</code></pre> <p>Her kan vi se at modellen inneholder to tekster, som er tomme når man åpner nettsiden.</p> <p>Oppdater også programmet slik at vi bruker den nye modellen:</p> <pre><code class=elm><span class=hljs-title>main</span> =\n  beginnerProgram { model = model, view = view, update = update }\n</code></pre> </section> <section class=check id=oppdater> <h2 class=check id=oppdater>Oppdater</h2> <p>Nå skal vi gjøre det mulig å lagre baklengstekstene i en setning med mellomrom mellom hvert ord. Da må vi endre <code>update</code> slik at den kan ta inn tekst og legge den til i <code>setning</code> i modellen vår:</p> <pre><code class=elm><span class=hljs-comment>-- UPDATE</span>\n\n<span class=hljs-keyword>type</span> <span class=hljs-type>Msg</span> = <span class=hljs-type>Endre</span> <span class=hljs-type>String</span> | <span class=hljs-type>LeggTil</span> <span class=hljs-type>String</span>\n\n<span class=hljs-title>update</span> msg model =\n  <span class=hljs-keyword>case</span> msg <span class=hljs-keyword>of</span>\n    <span class=hljs-type>Endre</span> nyTekst -&gt;\n      { model | tekst = <span class=hljs-type>String</span>.reverse nyTekst }\n    <span class=hljs-type>LeggTil</span> nyTekst -&gt;\n      { model | setning = model.setning ++ <span class=hljs-string>" "</span> ++ nyTekst  }\n</code></pre> <p><code>Msg</code> forteller oss hva slags input-meldinger vi kan ta imot fra nettsiden vår. Tidligere hadde vi bare <code>Endre</code>-funksjonen for når noen skriver inn tekst, nå har vi også <code>LeggTil</code>-funksjonen som gjør det mulig å legge til teksten i en setning.</p> <p>Vi må også oppdatere <code>update</code> med hva som skal skje når den får inn melding av typen <code>LeggTil</code>. Om vi ikke gjør det, vil Elm gi beskjed: <img src='+n(3288)+' alt=""></p> </section> <section class=check id=ny-knapp> <h2 class=check id=ny-knapp>Ny knapp</h2> <p>Nå mangler vi bare en knapp for å legge til tekst i setningen:</p> <pre><code class=elm><span class=hljs-comment>-- VIEW</span>\n\n<span class=hljs-title>view</span> model =\n  div []\n    [ input [ placeholder <span class=hljs-string>"Baklengstekst"</span>, onInput <span class=hljs-type>Endre</span> ] []\n    , button [ onClick (<span class=hljs-type>LeggTil</span> model.tekst) ] [ text <span class=hljs-string>"Legg til"</span> ]\n    , div - [ ] [ text model.tekst ]\n    , div - [ ] [ text model.setning ]\n    ]\n</code></pre> <p><code>onClick</code> bestemmer hva som skal skje når brukeren trykker på knappen. Her <em>kaller</em> vi funksjonen <code>LeggTil</code> og sender med teksten som ligger i modellen vi lagde tidligere.</p> <p>Programmet vårt ser slik ut med den nye knappen:</p> <pre><code class=elm><span class=hljs-keyword>import</span> Html <span class=hljs-keyword>exposing</span> (<span class=hljs-type>Html</span>, <span class=hljs-type>Attribute</span>, beginnerProgram, text, div, input, button)\n<span class=hljs-keyword>import</span> Html.Attributes <span class=hljs-keyword>exposing</span> (..)\n<span class=hljs-keyword>import</span> Html.Events <span class=hljs-keyword>exposing</span> (onInput, onClick)\n<span class=hljs-keyword>import</span> String\n\n\n<span class=hljs-title>main</span> =\n  beginnerProgram { model = model, view = view, update = update }\n\n<span class=hljs-comment>-- MODEL</span>\n<span class=hljs-title>model</span> =\n  {\n    tekst = <span class=hljs-string>""</span>\n  , setning = <span class=hljs-string>""</span>\n  }\n\n<span class=hljs-comment>-- UPDATE</span>\n\n<span class=hljs-keyword>type</span> <span class=hljs-type>Msg</span> = <span class=hljs-type>Endre</span> <span class=hljs-type>String</span> | <span class=hljs-type>LeggTil</span> <span class=hljs-type>String</span>\n\n<span class=hljs-title>update</span> msg model =\n  <span class=hljs-keyword>case</span> msg <span class=hljs-keyword>of</span>\n    <span class=hljs-type>Endre</span> nyTekst -&gt;\n      { model | tekst = <span class=hljs-type>String</span>.reverse nyTekst }\n    <span class=hljs-type>LeggTil</span> nyTekst -&gt;\n      { model | setning = model.setning ++ <span class=hljs-string>" "</span> ++ nyTekst  }\n\n\n<span class=hljs-comment>-- VIEW</span>\n\n<span class=hljs-title>view</span> model =\n  div []\n    [ input [ placeholder <span class=hljs-string>"Baklengstekst"</span>, onInput <span class=hljs-type>Endre</span> ] []\n    , button [ onClick (<span class=hljs-type>LeggTil</span> model.tekst) ] [ text <span class=hljs-string>"Legg til"</span> ]\n    , div - [ ] [ text model.tekst ]\n    , div - [ ] [ text model.setning ]\n    ]\n</code></pre> </section> <section class=try id=ting-du-kan-prove> <h2 class=try id=ting-du-kan-prove>Ting du kan prøve</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_5><label for=cbx_5> Utvid nettsiden med en knapp som snur alle ordene i setningen tilbake til rett vei</label></li> <li class=task-list-item><input type=checkbox id=cbx_6><label for=cbx_6> Tekst kan manipuleres med mange forskjellige innebygde funksjoner som <code>String.repeat</code> (gjenta en tekst), <code>String.toUpper</code> (gjør alle BOKSTAVENE TIL STORE BOKSTAVER)</label></li> <li class=task-list-item><input type=checkbox id=cbx_7><label for=cbx_7> Se full liste av hva man kan gjøre med tekst <a href=http://package.elm-lang.org/packages/elm-lang/core/5.1.1/String>i dokumentasjonen (på engelsk)</a></label></li> </ul> </section> </section> <section class=activity id=fargevelger> <h1 class=activity id=fargevelger>Fargevelger</h1> <p>Det finnes mange forskjellige type input-felter. Til nå har vi sett på tekst-input, men vi har også muligheten til å bare ta inn tall. I denne oppgaven skal vi lage en fargevelger. Farger på nettsider defineres som oftest i grader av rød, grønn og blå. Hver farge har en verdi fra 0 til 255.</p> <p>Vi skal lagre tre verdier i modellen vår, rød, grønn og blå i feltene <code>rod</code>, <code>gronn</code> og <code>blaa</code>.</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_8><label for=cbx_8> Legg til det første feltet i modellen vår, <code>rod</code>:</label></li> </ul> <pre><code class=elm><span class=hljs-keyword>import</span> Html <span class=hljs-keyword>exposing</span> (<span class=hljs-type>Html</span>, <span class=hljs-type>Attribute</span>, beginnerProgram, text, div, input)\n<span class=hljs-keyword>import</span> Html.Attributes <span class=hljs-keyword>exposing</span> (..)\n<span class=hljs-keyword>import</span> Html.Events <span class=hljs-keyword>exposing</span> (onInput)\n<span class=hljs-keyword>import</span> String\n\n<span class=hljs-title>main</span> =\n  beginnerProgram { model = model, view = view, update = update }\n\n<span class=hljs-comment>-- MODEL</span>\n<span class=hljs-title>model</span> =\n  {\n    rod = <span class=hljs-string>""</span>\n  }\n</code></pre> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_9><label for=cbx_9> Lagre rødstyrken fra en input, men begrens rekkevidden fra 0 til 255 med <code>Html.Attributes.min</code> og <code>Html.Attributes.max</code>:</label></li> </ul> <pre><code class=elm><span class=hljs-title>input</span> [ type_ "number", <span class=hljs-type>Html</span>.<span class=hljs-type>Attributes</span>.min "0", <span class=hljs-type>Html</span>.<span class=hljs-type>Attributes</span>.max "255" ] []\n</code></pre> <p>Vi trenger også å håndtere bruker-input, slik som i forrige oppgave</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_10><label for=cbx_10> Legg til koden som mangler:</label></li> </ul> <pre><code class=elm><span class=hljs-keyword>import</span> Html <span class=hljs-keyword>exposing</span> (<span class=hljs-type>Html</span>, <span class=hljs-type>Attribute</span>, beginnerProgram, text, div, input)\n<span class=hljs-keyword>import</span> Html.Attributes <span class=hljs-keyword>exposing</span> (..)\n<span class=hljs-keyword>import</span> Html.Events <span class=hljs-keyword>exposing</span> (onInput)\n<span class=hljs-keyword>import</span> String\n\n<span class=hljs-title>main</span> =\n  beginnerProgram { model = model, view = view, update = update }\n\n<span class=hljs-comment>-- MODEL</span>\n<span class=hljs-title>model</span> =\n  {\n    rod = <span class=hljs-string>""</span>\n  }\n\n<span class=hljs-comment>-- UPDATE</span>\n\n<span class=hljs-keyword>type</span> <span class=hljs-type>Msg</span> = <span class=hljs-type>EndreRod</span> <span class=hljs-type>String</span>\n\n<span class=hljs-title>update</span> msg model =\n  <span class=hljs-keyword>case</span> msg <span class=hljs-keyword>of</span>\n\n\n<span class=hljs-comment>-- VIEW</span>\n\n<span class=hljs-title>view</span> model =\n  div [ style [(<span class=hljs-string>"height"</span>, <span class=hljs-string>"100%"</span>), (<span class=hljs-string>"background"</span>, <span class=hljs-string>"rgb(255, 255, 255)"</span>)] ]\n    [ input [ type_ "number", <span class=hljs-type>Html</span>.<span class=hljs-type>Attributes</span>.min "0", <span class=hljs-type>Html</span>.<span class=hljs-type>Attributes</span>.max "255" ] []\n    , div [] [ text model.rod ]\n    ]\n</code></pre> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_11><label for=cbx_11> Legg til input-felter for de to andre fargene, og meldingene <code>EndreGronn</code> og <code>EndreBlaa</code></label></li> <li class=task-list-item><input type=checkbox id=cbx_12><label for=cbx_12> Oppdater <code>rgb(255, 255, 255)</code> slik at den bruker verdiene for rød, grønn og blå fra modellen vår (hint: slå sammen tekst)</label></li> <li class=task-list-item><input type=checkbox id=cbx_13><label for=cbx_13> Bytt ut number-input med <code>range</code>, og se hva som skjer!</label></li> </ul> <section class=check id=innebygd-fargevelger> <h2 class=check id=innebygd-fargevelger>Innebygd fargevelger</h2> <figure><img src='+n(3287)+' alt=""></figure> <p>Chrome, Edge, Firefox og Opera er nettlesere som kommer med innebygd fargevelger. Fargevelger er også en type input-felt.</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_14><label for=cbx_14> Lag en ny type input på nettsiden, som bruker fargevelger-type istedenfor <code>range</code> (hint: på engelsk er farge <code>color</code>)</label></li> <li class=task-list-item><input type=checkbox id=cbx_15><label for=cbx_15> Bytt ut verdien for <code>background</code> med fargen fra fargevelgeren (husk å legge til fargen i modellen og i <code>update</code>)</label></li> </ul> </section> </section> '},3287:function(e,s,n){e.exports=n.p+"_/oppgaver/src/elm/04_input/colors.5431b8.gif"},3288:function(e,s,n){e.exports=n.p+"_/oppgaver/src/elm/04_input/feil_case.91e5b0.png"}});