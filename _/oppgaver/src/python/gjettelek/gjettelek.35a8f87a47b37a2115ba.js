webpackJsonp([144,426],{1500:function(e,s,l){e.exports={frontmatter:l(511),content:l(2678)}},2678:function(e,s,l){e.exports="<section class=intro id=gjett-et-tall> <h1 class=intro id=gjett-et-tall>Gjett et tall! </h1> <p>I denne oppgaven skal du lage en spill som kalles gjetteleken. Det er meningen at du i denne oppgaven skal skrive all koden selv, ved hjelp av litt hint.</p> <p>Spillet er som følger:</p> <ol> <li>Programmet finner et tilfeldig tall mellom 1 og 100</li> <li>Brukeren gjetter et tall mellom 1 og 100.</li> <li>Programmet skriver ut:</li> </ol> <ul> <li><code>Higher!</code> hvis tallet var for lavt.</li> <li><code>Lower!</code> hvis tallet var for høyt.</li> <li>Hvis brukeren gjetter riktig tall skal programmet skrive ut <code>Correct!</code> og avslutte.</li> </ul> <ol start=3> <li>Så lenge brukeren ikke har gjettet tallet, så må programmet spørre om et nytt tall (brukeren har uendelig mange forsøk).</li> </ol> <p>Slik ser det ut når programmet kjører:</p> <figure><img src="+l(3417)+" alt=\"\"></figure> </section> <section class=activity id=klar-ferdig-programmer> <h1 class=activity id=klar-ferdig-programmer>Klar, ferdig, programmer!</h1> <p>Nå er det bare å sette i gang! Pass på at du forstår hvordan spillet fungerer før du begynner å programmere! Her er noen hint for å hjelpe deg på vei:</p> <section class=protip id=randint> <h2 class=protip id=randint>randint()</h2> <p>For å generere tilfelige tall kan det være lurt å bruke funksjonen <code>randint()</code>. For å bruke <code>randint()</code>, må vi importere funksjonen:</p> <pre><code class=python><span class=hljs-keyword>from</span> random <span class=hljs-keyword>import</span> randint\n</code></pre> <p>Hva gjør disse funksjonskallene?</p> <ul> <li><code>randint(1, 100)</code></li> <li><code>randint(1000, 1000000)</code></li> <li><code>randint(101, 102)</code></li> </ul> </section> <section class=protip id=int> <h2 class=protip id=int>int()</h2> <p>Når man får input fra brukeren får man en <em>tekststreng</em>, selv om brukeren skrev et tall, da kan det være greit å kunne konvertere teksten til et tall, ved hjelp av <code>int()</code>.</p> <p>Hva er forskjellen på disse kodesnuttene? (Kjør koden og test selv!)</p> <pre><code class=python>tall = input(<span class=hljs-string>\"Skriv et tall: \"</span>)\nsvar = <span class=hljs-number>3</span> + tall\nprint(svar)\n</code></pre> <pre><code class=python>tall = int(input(<span class=hljs-string>\"Skriv et tall: \"</span>))\nsvar = <span class=hljs-number>3</span> + tall\nprint(svar)\n</code></pre> </section> <section class=protip id=kontrollstrukturer> <h2 class=protip id=kontrollstrukturer>Kontrollstrukturer</h2> <p>Hva slags kontrollstrukturer trenger du?</p> <p>Eksempel på kontrollstrukturer er <code>for</code>-løkker, <code>while</code>-løkker og <code>if-elif-else</code>-uttrykk.</p> <ul> <li> <p><code>for</code>-løkker bruker vi når vi vil gjøre noe mange ganger.</p> <p><strong>Eksempel:</strong></p> <pre><code class=python><span class=hljs-comment># skriv ut ti tall</span>\n<span class=hljs-keyword>for</span> i <span class=hljs-keyword>in</span> range(<span class=hljs-number>10</span>):\n    print(<span class=hljs-string>'variabelen i er: '</span> + str(i))\n</code></pre> </li> <li> <p><code>while</code>-løkker brukes når vi vil gjøre noe mange ganger inntil en variabel endrer seg.</p> <p><strong>Eksempel:</strong></p> <pre><code class=python> a = <span class=hljs-number>0</span>\n <span class=hljs-comment># så lenge variablen `a` ikke er lik `10`</span>\n <span class=hljs-keyword>while</span> a != <span class=hljs-number>10</span>:\n     print(a)\n     a = a + <span class=hljs-number>1</span>\n</code></pre> <p>Prøv å se hva som skjer dersom du ikke tar med linjen <code>a = a + 1</code>.</p> </li> <li> <p><code>if-elif-else</code>-uttrykk kan bestemme om vi skal kjøre en spesiell kode.</p> <p><strong>Eksempel:</strong></p> <pre><code class=python>a = <span class=hljs-number>1</span>\n<span class=hljs-keyword>if</span> a == <span class=hljs-number>2</span>:\n  print(<span class=hljs-string>'a er 2'</span>)\n<span class=hljs-keyword>elif</span> a == <span class=hljs-number>3</span>:\n  print(<span class=hljs-string>'a er 3'</span>)\n<span class=hljs-keyword>else</span>:\n  print(<span class=hljs-string>'a er ikke 2 og ikke 3'</span>)\n</code></pre> <p>Prøv å endre verdien <code>a</code> på toppen til <code>2</code> eller <code>3</code> og se hva som skjer.</p> </li> </ul> </section> </section> <section class=activity id=test-programmet-ditt> <h1 class=activity id=test-programmet-ditt>Test programmet ditt</h1> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_0><label for=cbx_0> Fungerer det slik som i beskrivelsen i begynnelsen av oppgaven? Hvis ikke må du rette feilene dine.</label></li> </ul> <section class=challenge id=7-forsok> <h2 class=challenge id=7-forsok>7 forsøk</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_1><label for=cbx_1> Ettersom vi bare har tall mellom 1 og 100 kan vi alltid gjette tallet på 7 forsøk eller bedre. Klarer du dette selv?</label></li> </ul> </section> <section class=challenge id=begrense-brukerens-forsok> <h2 class=challenge id=begrense-brukerens-forsok>Begrense brukerens forsøk</h2> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_2><label for=cbx_2> Til nå har brukeren hatt uendelig mange forsøk. Klarer du å skrive om koden din slik at brukeren bare får 12 forsøk?</label></li> </ul> </section> </section> "},3417:function(e,s,l){e.exports=l.p+"_/oppgaver/src/python/gjettelek/python_guessing_game.282d7d.png"}});