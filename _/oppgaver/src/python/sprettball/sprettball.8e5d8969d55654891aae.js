webpackJsonp([239,428],{1533:function(s,e,a){s.exports={frontmatter:a(540),content:a(2716)}},2716:function(s,e){s.exports="<section class=intro id=introduksjon> <h1 class=intro id=introduksjon>Introduksjon</h1> <p>I denne oppgaven skal du lage en ballanimasjon, ved hjelp av det du har lært i <a href=../enkle_objekter/enkle_objekter.html>oppgaven om enkle objekter</a>, samt Pygame og Pygame Zero. Dersom du ikke husker objekter, kan du <a href=../enkle_objekter/enkle_objekter.html>gå tilbake</a> og raskt repetere.</p> </section> <section class=activity id=steg-1-hoyde-og-bredde> <h1 class=activity id=steg-1-hoyde-og-bredde>Steg 1: Høyde og bredde</h1> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_0><label for=cbx_0> Lag et nytt python-program med følgende kode:</label></li> </ul> <pre><code class=python>HEIGHT = <span class=hljs-number>400</span>\nWIDTH = <span class=hljs-number>600</span>\n</code></pre> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_1><label for=cbx_1> Kjør programmet, og se hva som skjer. Du skal nå se et svart vindu som er 400 piksler høyt, og 600 piksler bredt.</label></li> </ul> <p>En <strong>piksel</strong> er et lyspunkt på skjermen og nøyaktig hvor stort dette lyspunktet er avhenger av hvilken skjerm du har - dermed kan det være at vinduet får ulik størrelse på andre datamaskiner enn din egen.</p> </section> <section class=activity id=steg-2-lag-en-ball> <h1 class=activity id=steg-2-lag-en-ball>Steg 2: Lag en ball!</h1> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_2><label for=cbx_2> Vi skal nå lage en ball som vi kan vise på skjermen. Vi begynner med å lage en <code>Ball</code>-klasse, som har variablene <code>radius</code> og <code>color</code>, samt en posisjon bestående av <code>x</code> og <code>y</code>.</label></li> </ul> <pre><code class=python>COLORS = {\n    <span class=hljs-string>'red'</span>: (<span class=hljs-number>255</span>, <span class=hljs-number>0</span>, <span class=hljs-number>0</span>),\n    <span class=hljs-string>'green'</span>: (<span class=hljs-number>0</span>, <span class=hljs-number>255</span>, <span class=hljs-number>0</span>),\n    <span class=hljs-string>'blue'</span>: (<span class=hljs-number>0</span>, <span class=hljs-number>0</span>, <span class=hljs-number>255</span>),\n    <span class=hljs-string>'white'</span>: (<span class=hljs-number>255</span>, <span class=hljs-number>255</span>, <span class=hljs-number>255</span>),\n    <span class=hljs-string>'black'</span>: (<span class=hljs-number>0</span>, <span class=hljs-number>0</span>, <span class=hljs-number>0</span>)\n}\n\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Ball</span>:</span>\n    radius =  <span class=hljs-number>20</span>\n    color = COLORS[<span class=hljs-string>'red'</span>]\n    x = WIDTH // <span class=hljs-number>2</span>\n    y = HEIGHT // <span class=hljs-number>2</span>\n</code></pre> <p>Vi har her valgt å ha en rød ball, men du kan velge en annen farge fra <code>COLORS</code>-ordboka om du vil det. Husk at <code>//</code> betyr 'heltallsdivisjon', dvs at svaret rundes av nedover, slik at vi får et helt tall som svar.</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_3><label for=cbx_3> Vi må i tillegg ha en funksjon som kan tegne ballen vår. Denne skal vi kalle for <code>draw()</code>. Husk på at funksjonene som skal være en del av klassen må ha et innrykk. Vi må dermed endre på klassen, slik at den ser slik ut:</label></li> </ul> <pre><code class=python><span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Ball</span>:</span>\n    radius = <span class=hljs-number>20</span>\n    color = COLORS[<span class=hljs-string>'red'</span>]\n    x = WIDTH // <span class=hljs-number>2</span>\n    y = HEIGHT // <span class=hljs-number>2</span>\n\n    <span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>draw</span><span class=hljs-params>(self)</span>:</span>\n        screen.draw.filled_circle((self.x, self.y), self.radius, self.color)\n\n</code></pre> <p>Nå må er du nesten ferdig. Vi må lage et <code>Ball</code>-objekt, <code>ball1</code> og en global <code>draw</code>-funksjon. Dette vil se slik ut:</p> <pre><code class=python>ball1 = Ball()\n\n<span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>draw</span><span class=hljs-params>()</span>:</span>\n    screen.clear()\n    ball1.draw()\n</code></pre> <p><code>screen.clear()</code> sørger for at vi tegner på en blank skjerm, og må alltid komme først i den globale funksjonen <code>draw()</code>.</p> <section class=flag id=test-programmet-ditt> <h2 class=flag id=test-programmet-ditt>Test programmet ditt</h2> <p>Du kan nå teste programmet ditt. Du skal få opp en ensfarget sirkel midt i vinduet.</p> </section> </section> <section class=activity id=steg-3-bevegelse> <h1 class=activity id=steg-3-bevegelse>Steg 3: Bevegelse</h1> <ul class=task-list> <li class=task-list-item> <p><input type=checkbox id=cbx_4><label for=cbx_4> Vi vil at ballen vår skal bevege seg. Hvordan skal vi få til dette? Vi lager funksjonen <code>update()</code>.</label></p> </li> <li class=task-list-item> <p><input type=checkbox id=cbx_5><label for=cbx_5> Først må vi legge til et par variabler som bestemmer farten på ballen. Vi skal her ha en variabel for farten i y-retning, og en variabel for farten i x-retning.</label></p> </li> </ul> <pre><code class=python><span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Ball</span>:</span>\n    radius =  <span class=hljs-number>20</span>\n    color = COLORS[<span class=hljs-string>'red'</span>]\n    x = WIDTH // <span class=hljs-number>2</span>\n    y = HEIGHT // <span class=hljs-number>2</span>\n    speed_x = <span class=hljs-number>3</span>\n    speed_y = <span class=hljs-number>3</span>\n</code></pre> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_6><label for=cbx_6> Så må vi lage en en funksjon <code>update()</code> som er en del av <code>Ball</code>. Denne sørger for at ballen beveger seg <code>speed_x</code> piksler i x-retningen, og <code>speed_y</code> i y-retningen.</label></li> </ul> <pre><code class=python><span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Ball</span>:</span>\n    <span class=hljs-comment># ...</span>\n\n    <span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>update</span><span class=hljs-params>(self)</span>:</span>\n        self.x += self.speed_x\n        self.y += self.speed_y\n</code></pre> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_7><label for=cbx_7> I tillegg må vi ha en global funksjon <code>update()</code> som kaller <code>ball1.update()</code>:</label></li> </ul> <pre><code class=python><span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>update</span><span class=hljs-params>()</span>:</span>\n    ball1.update()\n</code></pre> <section class=flag id=test-programmet-ditt-2> <h2 class=flag id=test-programmet-ditt-2>Test programmet ditt</h2> <p>Du kan nå teste programmet ditt igjen. Ballen skal nå bevege seg, dersom alt er gjort riktig.</p> <p>Hva skjer når den kommer til kanten? I neste steg skal vi sørge for at ballen ikke forsvinner ut av vinduet.</p> </section> </section> <section class=activity id=steg-4-veggkollisjoner> <h1 class=activity id=steg-4-veggkollisjoner>Steg 4: Veggkollisjoner</h1> <p>Vi ønsker å la ballen sprette tilbake når den treffer en vegg. Her er det et par ting vi må tenke på - hvordan oppdager vi at ballen treffer veggen, og hvordan kan vi endre variablene slik at den spretter vekk fra veggen? Ballens posisjon bestemmes av <code>x</code> og <code>y</code> men den har også <code>radius</code> som vi må ta hensyn til når vi skal oppdage om ballen treffer veggen. Når ballen treffer den øverste eller den nederste veggen ønsker vi at farten reverseres i y-retning, det samme gjelder for farten i x-retning når vi treffer høyre eller venstre vegg.</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_8><label for=cbx_8> Vi må endre <code>update()</code>-funksjonen i <code>Ball</code>-klassen:</label></li> </ul> <pre><code class=python><span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Ball</span>:</span>\n    <span class=hljs-comment># ...</span>\n\n    <span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>update</span><span class=hljs-params>(self)</span>:</span>\n        self.x += self.speed_x\n        self.y += self.speed_y\n\n        <span class=hljs-comment># sjekker for kollisjon i x-retning</span>\n        <span class=hljs-keyword>if</span> self.x + self.radius &gt;= WIDTH <span class=hljs-keyword>or</span> self.x - self.radius &lt;= <span class=hljs-number>0</span>:\n            self.speed_x = -self.speed_x\n\n        <span class=hljs-comment># sjekker for kollisjon i y-retning</span>\n        <span class=hljs-keyword>if</span> self.y + self.radius &gt;= HEIGHT <span class=hljs-keyword>or</span> self.y - self.radius &lt;= <span class=hljs-number>0</span>:\n            self.speed_y = -self.speed_y\n</code></pre> <section class=flag id=test-programmet-ditt-3> <h2 class=flag id=test-programmet-ditt-3>Test programmet ditt</h2> <p>Kjør programmet ditt, og pass på at ballen spretter tilbake når den treffer en av veggene.</p> </section> </section> <section class=activity id=steg-5-styre-farta-til-ballen> <h1 class=activity id=steg-5-styre-farta-til-ballen>Steg 5: Styre farta til ballen</h1> <p>Vi skal la brukeren styre farta til ballen ved hjelp av piltastene. Når brukeren trykker på 'Pil opp' skal ballen gå raskere oppover (evt. mindre fort nedover), det motsatte skal skje om brukeren trykker 'Pil ned'. Det samme skal skje om brukeren trykker på 'Pil høyre' eller 'Pil venstre', men da skal fartsendringa skje i x-retning.</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_9><label for=cbx_9> For å få til dette skal vi lage en <code>on_key_down()</code>-funksjon i <code>Ball</code>-klassen:</label></li> </ul> <pre><code class=python><span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Ball</span>:</span>\n    <span class=hljs-comment># ...</span>\n\n    <span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>on_key_down</span><span class=hljs-params>(self, key)</span>:</span>\n        <span class=hljs-keyword>if</span> key == keys.LEFT:\n            self.speed_x -= <span class=hljs-number>1</span>\n        <span class=hljs-keyword>elif</span> key == keys.RIGHT:\n            self.speed_x += <span class=hljs-number>1</span>\n        <span class=hljs-keyword>elif</span> key == keys.UP:\n            self.speed_y -= <span class=hljs-number>1</span>\n        <span class=hljs-keyword>elif</span> key == keys.DOWN:\n            self.speed_y += <span class=hljs-number>1</span>\n</code></pre> <p>Legg merke til at funksjonen har et parameter, <code>key</code>, som brukes til å avgjøre hvilken tast brukeren trykket på.</p> <ul class=task-list> <li class=task-list-item><input type=checkbox id=cbx_10><label for=cbx_10> Vi trenger også en global <code>on_key_down()</code>-funksjon. Denne har også en <code>key</code>-parameter, som sendes videre til <code>ball1.on_key_down()</code>.</label></li> </ul> <pre><code class=python><span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>on_key_down</span><span class=hljs-params>(key)</span>:</span>\n    ball1.on_key_down(key)\n</code></pre> <section class=flag id=test-programmet-ditt-4> <h2 class=flag id=test-programmet-ditt-4>Test programmet ditt</h2> <p>Du skal nå ha en ball som spretter mellom vinduskantene, og du skal kunne styre farten ved hjelp av piltastene.</p> </section> <section class=challenge id=utfordring-stopp-ballen> <h2 class=challenge id=utfordring-stopp-ballen>Utfordring: Stopp ballen</h2> <p>Vi ønsker å bruke mellomromstasten for å stoppe ballen. Dvs. sette <code>speed_x</code> og <code>speed_y</code> til <code>0</code>. Prøv å endre funksjonen <code>on_key_down(key)</code> i <code>Ball</code>-klassen for å sjekke om brukeren har trykket på mellomromstasten.</p> <p><strong>Hint:</strong> <code>key == keys.SPACE</code> vil være sant dersom brukeren trykker på mellomromstasten.</p> </section> </section> "}});